name: hipo-win

on: [push, pull_request]

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Checkout GKlib
        uses: actions/checkout@v4
        with:
          repository: KarypisLab/GKlib
          ref: master
          path: GKlib

      - name: Checkout METIS
        uses: actions/checkout@v4
        with:
          repository: KarypisLab/METIS
          ref: master
          path: METIS

      - name: Create installs dir
        working-directory: ${{runner.workspace}}
        shell: bash
        run: | 
          mkdir installs
          ls

      - name: Install GKLIB
        working-directory: ${{runner.workspace}}
        shell: bash
        run: |
          cd GKlib
          cmake -S. -B build -DCMAKE_INSTALL_PREFIX==${{runner.workspace}}/installs
          cmake --build build --config Release
          cmake --install build

      - name: Check GKlib
        working-directory: ${{runner.workspace}}
        run: |
          cd installs
          ls 
          ls Release/lib

      - name: Install METIS
        run: |
          cd METIS
          cmake -S. -B build -DCMAKE_INSTALL_PREFIX==${{runner.workspace}}/installs
          cmake --build build --config Release
          cmake --install build
          make config prefix=${{runner.workspace}}/installs
          make
          make install

      - name: Check METIS
        working-directory: ${{runner.workspace}}
        run: |
          cd installs
          ls 
          ls lib

        # run: ls C:/vcpkg/packages/metis_x64-windows/
        # run: ls C:/vcpkg/packages/metis_x64-windows/lib
        # run: ls C:/vcpkg/packages/metis_x64-windows/share
        # run: ls C:/vcpkg/packages/gklib_x64-windows/share/gklib

      - name: Install OpenBLAS
        run: vcpkg install openblas

      - name: Create build dir
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure cmake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake $GITHUB_WORKSPACE \
          -DHIPO=ON \
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build 
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake --build . --parallel --config Release

      - name: Test executable 
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: ./Release/bin/highs --solver=hipo $GITHUB_WORKSPACE/check/instances/afiro.mps

      - name: Ctest
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          ctest --parallel --timeout 300 --output-on-failure -C Release

  # debug:
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [windows-latest]

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Install METIS
  #       run: vcpkg install metis

  #       # run: ls C:/vcpkg/packages/metis_x64-windows/
  #       # run: ls C:/vcpkg/packages/metis_x64-windows/lib
  #       # run: ls C:/vcpkg/packages/metis_x64-windows/share
  #       # run: ls C:/vcpkg/packages/gklib_x64-windows/share/gklib

  #     - name: Install OpenBLAS
  #       run: vcpkg install openblas

  #     - name: Create build dir
  #       run: cmake -E make_directory ${{runner.workspace}}/build

  #     - name: Configure cmake
  #       shell: bash
  #       working-directory: ${{runner.workspace}}/build
  #       # Here is _DIR because with vcpkg CMake find_package works.
  #       run: |
  #         cmake $GITHUB_WORKSPACE \
  #         -DHIPO=ON \
  #         -Dmetis_DIR=C:/vcpkg/packages/metis_x64-windows/share/metis \
  #         -DGKlib_DIR=C:/vcpkg/packages/gklib_x64-windows/share/gklib \
  #         -DOpenBLAS_DIR=C:/vcpkg/packages/openblas_x64-windows/share/openblas

  #     - name: Build 
  #       shell: bash
  #       working-directory: ${{runner.workspace}}/build
  #       run: |
  #         cmake --build . --parallel --config Debug

  #     - name: Test executable 
  #       shell: bash
  #       working-directory: ${{runner.workspace}}/build
  #       run: ./Debug/bin/highs --solver=hipo $GITHUB_WORKSPACE/check/instances/afiro.mps

  #     - name: Ctest
  #       shell: bash
  #       working-directory: ${{runner.workspace}}/build
  #       run: |
  #         ctest --parallel --timeout 300 --output-on-failure -C Debug