name: hipo-win

on: [push, pull_request]

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v4

      # 2. Set up caching for vcpkg
      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ./vcpkg/installed
            ./vcpkg/downloads
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      # - name: Install GKlib
      #   run: vcpkg install gklib

      # - name: ls
      #   run: ls C:/vcpkg/packages/gklib_x64-windows/share/gklib

      - name: Install METIS
        run: vcpkg install metis

        # run: ls C:/vcpkg/packages/metis_x64-windows/
        # run: ls C:/vcpkg/packages/metis_x64-windows/lib
        # run: ls C:/vcpkg/packages/metis_x64-windows/share
        # run: ls C:/vcpkg/packages/gklib_x64-windows/share/gklib

      - name: Install OpenBLAS
        run: vcpkg install openblas

      - name: Create build dir
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure cmake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake $GITHUB_WORKSPACE \
          -DHIPO=ON \
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake

         # -DCMAKE_CXX_FLAGS="-I C:/vcpkg/packages/gklib_x64-windows/include/GKlib"

      - name: Build 
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake --build . --parallel --config Release

      - name: Test executable 
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: ./Release/bin/highs --solver=hipo $GITHUB_WORKSPACE/check/instances/afiro.mps

      - name: Ctest
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          ctest --parallel --timeout 300 --output-on-failure -C Release

  debug_all_tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v4

      # 2. Set up caching for vcpkg
      - name: Cache vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ./vcpkg/installed
            ./vcpkg/downloads
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Install METIS
        run: vcpkg install metis

      - name: Install OpenBLAS
        run: vcpkg install openblas

      - name: Create build dir
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure cmake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Here is _DIR because with vcpkg CMake find_package works.
        run: |
          cmake $GITHUB_WORKSPACE \
          -DHIPO=ON \
          -DALL_TESTS=ON \
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake

      - name: Build 
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          cmake --build . --parallel --config Debug

      - name: Test executable 
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: ./Debug/bin/highs --solver=hipo $GITHUB_WORKSPACE/check/instances/afiro.mps

      - name: Ctest
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: |
          ctest --parallel --timeout 300 --output-on-failure -C Debug