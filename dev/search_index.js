var documenterSearchIndex = {"docs":
[{"location":"guide/advanced/#guide-advanced","page":"Advanced features","title":"Advanced features","text":"","category":"section"},{"location":"guide/advanced/#Simplex-tableau-data","page":"Advanced features","title":"Simplex tableau data","text":"","category":"section"},{"location":"guide/advanced/","page":"Advanced features","title":"Advanced features","text":"HiGHS has a suite of methods for operations with the invertible representation of the current basis matrix B. To use these requires knowledge of the corresponding (ordered) basic variables. This is obtained using the method getBasicVariables , with non-negative values being columns and negative values corresponding to row indices plus one [so -1 indicates row 0]. Methods getBasisInverseRow and getBasisInverseCol yield a specific row or column of B^-1. Methods getBasisSolve and getBasisTransposeSolve yield the solution of Bx=b and Bx=b respectively. Finally, the methods getReducedRow and getReducedColumn yield a specific row or column of B^-1A. In all cases, HiGHS can return the number and indices of the nonzeros in the result.","category":"page"},{"location":"interfaces/other/#Other-Interfaces","page":"Other","title":"Other Interfaces","text":"","category":"section"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"note: Note\nSome of the interfaces listed on this page are not officially supported by the HiGHS development team and are contributed by the community.","category":"page"},{"location":"interfaces/other/#AMPL","page":"Other","title":"AMPL","text":"","category":"section"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"HiGHS can be used via AMPL, see the AMPL Documentation.","category":"page"},{"location":"interfaces/other/#C#","page":"Other","title":"C#","text":"","category":"section"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"Here are observations on calling HiGHS from C#:","category":"page"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"The file highs_csharp_api.cs contains all the PInvoke you need. Copy it into your C# project.\nMake sure, that the native HiGHS library (highs.dll, libhighs.dll, libhighs.so, ... depending on your platform) can be found at runtime. How to do this is platform dependent, copying it next to your C# executable should work in most cases. You can use msbuild for that. On linux, installing HiGHS system wide should work.\nMake sure that all dependencies of the HiGHS library can be found, too. For example, if HiGHS was build using Visual C++ make sure that the MSVCRuntime is installed on the machine you want to run your application on.\nDepending on the name of your HiGHS library, it might be necessary to change the constant \"highslibname\". See document on writing cross platform P/Invoke code if necessary.\nCall the Methods in highs_csharp_api.cs and have fun with HiGHS.","category":"page"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"This is the normal way to call plain old C from C# with the great simplification that you don't have to write the PInvoke declarations yourself.","category":"page"},{"location":"interfaces/other/#fortran-api","page":"Other","title":"Fortran","text":"","category":"section"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"The interface is in highs_fortran_api.f90. Its methods are simply bindings to the C API","category":"page"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"To include in the build, switch the Fortran CMake parameter on:","category":"page"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"cmake -DFORTRAN=ON ..","category":"page"},{"location":"interfaces/other/#GAMS","page":"Other","title":"GAMS","text":"","category":"section"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"The interface is available at GAMSlinks, including pre-build libraries.","category":"page"},{"location":"interfaces/other/#Javascript","page":"Other","title":"Javascript","text":"","category":"section"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"HiGHS can be used from javascript directly inside a web browser thanks to highs-js. See the demo and the npm package.\nAlternatively, HiGHS also has a native Node.js interface.","category":"page"},{"location":"interfaces/other/#R","page":"Other","title":"R","text":"","category":"section"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"An R interface is available through the highs R package.","category":"page"},{"location":"interfaces/other/#Rust","page":"Other","title":"Rust","text":"","category":"section"},{"location":"interfaces/other/","page":"Other","title":"Other","text":"HiGHS can be used from rust through the highs crate. The rust linear programming modeler good_lp supports HiGHS.","category":"page"},{"location":"structures/enums/#structures-enums","page":"Enums","title":"Enums","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"The members of the fundamental HiGHS enums are defined below. If Enum refers to a particular enum, and Member to a particular member, the members are available as follows.","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"Python: highspy.Enum.Member\nC++: Enum::Member","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"Members for internal use only are not documented.","category":"page"},{"location":"structures/enums/#HighsStatus","page":"Enums","title":"HighsStatus","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This is (part of) the return value of most HiGHS methods:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kError: The method has exposed an error\nkOk: The method has completed successfully\nkWarning: The method has recovered from an unusual event, or has terminated","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"due to reaching a time or iteration limit","category":"page"},{"location":"structures/enums/#MatrixFormat","page":"Enums","title":"MatrixFormat","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines the format of a HighsSparseMatrix:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kColwise: The matrix is stored column-wise\nkRowwise: The matrix is stored row-wise","category":"page"},{"location":"structures/enums/#ObjSense","page":"Enums","title":"ObjSense","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines optimization sense of a HighsLp:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kMinimize: The objective is to be minimized\nkMaximize: The objective is to be maximized","category":"page"},{"location":"structures/enums/#HighsVarType","page":"Enums","title":"HighsVarType","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines the feasible values of a variable within a model:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kContinuous: The variable can take continuous values between its bounds\nkInteger: The variable must take integer values between its bounds\nkSemiContinuous: The variable must be zero or take continuous values between its bounds\nkSemiInteger: The variable must be zero or take integer values between its bounds","category":"page"},{"location":"structures/enums/#SolutionStatus","page":"Enums","title":"SolutionStatus","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines the nature of any primal or dual solution information:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kSolutionStatusNone: There is no solution information\nkSolutionStatusInfeasible: The solution is not feasible\nkSolutionStatusFeasible: The solution is feasible","category":"page"},{"location":"structures/enums/#BasisValidity","page":"Enums","title":"BasisValidity","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines the nature of any basis information:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kBasisValidityInvalid: There is no basisn information\nkBasisValidityValid: The basis information is valid","category":"page"},{"location":"structures/enums/#HighsModelStatus","page":"Enums","title":"HighsModelStatus","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines the status of the model after a call to run","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kNotset: The model status has not been set\nkModelError: There is an error in the model\nkSolveError: There has been an error when solving the model\nkModelEmpty: The model is empty\nkOptimal: The model has been solved to optimality\nkInfeasible: The model is infeasible\nkUnboundedOrInfeasible: The model is unbounded or infeasible\nkUnbounded: The model is unbounded\nkObjectiveBound: The bound on the model objective value has been reached\nkObjectiveTarget: The target value for the model objective has been reached\nkTimeLimit: The run time limit has been reached\nkIterationLimit: The iteration limit has been reached\nkSolutionLimit: The MIP solver has reached the limit on the number of LPs solved\nkUnknown: The model status is unknown","category":"page"},{"location":"structures/enums/#HighsBasisStatus","page":"Enums","title":"HighsBasisStatus","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines the status of a variable (or slack variable for a constraint) in a basis:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kLower: The variable is nonbasic at its lower bound (or fixed value)\nkBasic: The variable is basic\nkUpper: The variable is at its upper bound\nkZero: A free variable is nonbasic and set to zero\nkNonbasic: The variable is nonbasic","category":"page"},{"location":"structures/enums/#HighsOptionType","page":"Enums","title":"HighsOptionType","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines the types of option values that control HiGHS:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kBool: The option type is boolean\nkInt: The option type is integer\nkDouble: The option type is double\nkString: The option type is string","category":"page"},{"location":"structures/enums/#HighsInfoType","page":"Enums","title":"HighsInfoType","text":"","category":"section"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"This defines the types of (scalar) information available after a call to run:","category":"page"},{"location":"structures/enums/","page":"Enums","title":"Enums","text":"kInt64: The information type is 64-bit integer\nkInt: The information type is integer\nkDouble: The information type is double","category":"page"},{"location":"structures/classes/HighsInfo/#HighsInfo","page":"HighsInfo","title":"HighsInfo","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"Scalar information about a solved model is communicated via an instance of the HighsInfo class","category":"page"},{"location":"structures/classes/HighsInfo/#valid","page":"HighsInfo","title":"valid","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"Indicates whether the values in a HighsInfo instance are valid\nType: bool","category":"page"},{"location":"structures/classes/HighsInfo/#simplex_iteration_count","page":"HighsInfo","title":"simplex_iteration_count","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The number of simplex iterations performed\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#ipm_iteration_count","page":"HighsInfo","title":"ipm_iteration_count","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The number of interior point iterations performed\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#crossover_iteration_count","page":"HighsInfo","title":"crossover_iteration_count","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The number of crossover iterations performed\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#qp_iteration_count","page":"HighsInfo","title":"qp_iteration_count","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The number of QP iterations performed\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#primal_solution_status","page":"HighsInfo","title":"primal_solution_status","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"Comparison with SolutionStatus gives the status of the primal solution\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#dual_solution_status","page":"HighsInfo","title":"dual_solution_status","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"Comparison with SolutionStatus gives the status of the dual solution\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#basis_validity","page":"HighsInfo","title":"basis_validity","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"Comparison with BasisValidity gives the status of any basis information\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#objective_function_value","page":"HighsInfo","title":"objective_function_value","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The optimal value of the objective function\nType: double","category":"page"},{"location":"structures/classes/HighsInfo/#mip_node_count","page":"HighsInfo","title":"mip_node_count","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The number of nodes generated by the MIP solver\nType: long integer","category":"page"},{"location":"structures/classes/HighsInfo/#mip_dual_bound","page":"HighsInfo","title":"mip_dual_bound","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The dual bound for the MIP solver\nType: double","category":"page"},{"location":"structures/classes/HighsInfo/#mip_gap","page":"HighsInfo","title":"mip_gap","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The absolute value of the gap between the primal and bounds, relative to the primal bound.\nType: double","category":"page"},{"location":"structures/classes/HighsInfo/#max_integrality_violation","page":"HighsInfo","title":"max_integrality_violation","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The maximum deviation from an integer value over all the discrete variables\nType: double","category":"page"},{"location":"structures/classes/HighsInfo/#num_primal_infeasibilities","page":"HighsInfo","title":"num_primal_infeasibilities","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The number of variables violating a bound by more than the primal feasibility tolerance.\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#max_primal_infeasibility","page":"HighsInfo","title":"max_primal_infeasibility","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The maximum violation of a bound on a variable\nType: double","category":"page"},{"location":"structures/classes/HighsInfo/#sum_primal_infeasibilities","page":"HighsInfo","title":"sum_primal_infeasibilities","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The sum of violations of bounds by variables\nType: double","category":"page"},{"location":"structures/classes/HighsInfo/#num_dual_infeasibilities","page":"HighsInfo","title":"num_dual_infeasibilities","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The number of variables violating dual feasibility by more than the dual feasibility tolerance.\nType: integer","category":"page"},{"location":"structures/classes/HighsInfo/#max_dual_infeasibility","page":"HighsInfo","title":"max_dual_infeasibility","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The maximum dual feasibility violation\nType: double","category":"page"},{"location":"structures/classes/HighsInfo/#sum_dual_infeasibilities","page":"HighsInfo","title":"sum_dual_infeasibilities","text":"","category":"section"},{"location":"structures/classes/HighsInfo/","page":"HighsInfo","title":"HighsInfo","text":"The sum of dual feasibility violations\nType: double","category":"page"},{"location":"installation/#Install-HiGHS","page":"Install HiGHS","title":"Install HiGHS","text":"","category":"section"},{"location":"installation/#Install-via-a-package-manager","page":"Install HiGHS","title":"Install via a package manager","text":"","category":"section"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"HiGHS can be installed using a package manager in the cases of Julia, Python, and Rust.","category":"page"},{"location":"installation/#Precompiled-Binaries","page":"Install HiGHS","title":"Precompiled Binaries","text":"","category":"section"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"These binaries are provided by the Julia community and are not officially supported by the HiGHS development team. If you have trouble using these libraries, please open a GitHub issue and tag @odow in your question.","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"Precompiled static executables are available for a variety of platforms at","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"https://github.com/JuliaBinaryWrappers/HiGHSstatic_jll.jl/releases","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"Each download includes library files for linking to external projects and a stand-alone executable.","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"To install a precompiled binary, download the appropriate .tar.gz file and extract the executable located at /bin/highs.","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"For Windows users: if in doubt, choose the file ending in x86_64-w64-mingw32-cxx11.tar.gz\nFor M1 macOS users: choose the file ending in aarch64-apple-darwin.tar.gz\nFor Intel macOS users: choose the file ending in x86_64-apple-darwin.tar.gz","category":"page"},{"location":"installation/#Compile-from-source","page":"Install HiGHS","title":"Compile from source","text":"","category":"section"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"HiGHS uses CMake as build system, and requires at least version 3.15. After extracting HiGHS from GitHub, setup a build folder and call CMake as follows:","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"$ mkdir build\n$ cd build\n$ cmake ..","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"Then compile the code using:","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"$ cmake --build .","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"To test whether the compilation was successful, run","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"$ ctest","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"HiGHS is installed using the command","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"$ cmake --install .","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"This installs the library in lib/, as well as all header files in include/highs/. For a custom installation in install_folder run","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"$ cmake -DCMAKE_INSTALL_PREFIX=install_folder .","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"and then","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"$ cmake --install .","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"To use the library from a CMake project use","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"find_package(HiGHS)","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"and add the correct path to HIGHS_DIR.","category":"page"},{"location":"installation/#Windows","page":"Install HiGHS","title":"Windows","text":"","category":"section"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"By default, CMake builds the debug version of the binaries. These are generated in a directory Debug. To build a release version, add the option --config Release","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"    cmake -S . -B build\n    cmake --build build --config Release","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"It is also possible to specify a specific Visual studio version to build with:","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"    cmake -G \"Visual Studio 17 2022\" -S . -B build\n    cmake --build build","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"When building under Windows, some extra options are available.  One is building a 32 bit version or a 64 bit version. The default build is 64 bit. To build 32 bit, the following commands can be used from the HiGHS/ directory:","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"    cmake -A Win32 -S . -DFAST_BUILD=OFF -B buildWin32\n    cmake --build buildWin32","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"Another thing specific for windows is the calling convention, particularly important for the HiGHS dynamic library (dll). The default calling convention in windows is cdecl calling convention, however, dlls are most often compiled with stdcall. Most applications which expect stdcall, can't access dlls with cdecl and vice versa. To change the default calling convention from cdecl to stdcall the following option can be added","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"    cmake -DSTDCALL=ON -S . -DFAST_BUILD=OFF -B build\n    cmake --build build","category":"page"},{"location":"installation/","page":"Install HiGHS","title":"Install HiGHS","text":"An extra note. With the legacy -DFAST_BUILD=OFF, under windows the build dll is called highs.dll however the exe expects libhighs.dll so a manual copy of highs.dll to libhighs.dll is needed. Of course all above options can be combined with each other.","category":"page"},{"location":"options/intro/#Introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"The options that control HiGHS are of four types: boolean, integer, double and string. Their values can be specified:","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"via the command line when running the Executable\nvia method calls when running HiGHS in an application.","category":"page"},{"location":"options/intro/#Options-file","page":"Introduction","title":"Options file","text":"","category":"section"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"When running the Executable via the command line, some options values can be set explicitly in the command, and all options can be set by means of an options file.","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"A sample options file, giving documentation of all the options is written to the console by the command:","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"$ bin/highs --options_file=\"\"","category":"page"},{"location":"options/intro/#Option-methods","page":"Introduction","title":"Option methods","text":"","category":"section"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"To set the value of option name, call:","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"status = h.setOptionValue(name, value)","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"where the value passed can be an identifier of the appropriate type, or an explicit value.","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"To get the value of option name, call:","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"[status, value] = h.getOptionValue(name)","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"To get the type of option name, call:","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"[status, type] = h.getOptionType(name)","category":"page"},{"location":"options/intro/","page":"Introduction","title":"Introduction","text":"Examples of calls to options methods are given in the examples section.","category":"page"},{"location":"interfaces/python/example-py/#example-py","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"interfaces/python/example-py/#Initialize-HiGHS","page":"Examples","title":"Initialize HiGHS","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"HiGHS must be initialized before making calls to the HiGHS Python library, and the examples below assume that it has been done","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"import highspy\nimport numpy as np\nh = highspy.Highs()","category":"page"},{"location":"interfaces/python/example-py/#Read-a-model","page":"Examples","title":"Read a model","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"To read a model into HiGHS from a MPS files and (CPLEX) LP files pass the file name to readModel. ","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"# Read a model from MPS file model.mps\nfilename = 'model.mps'\nstatus = h.readModel(filename)\nprint('Reading model file ', filename, ' returns a status of ', status)\nfilename = 'model.dat'\nstatus = h.readModel(filename)\nprint('Reading model file ', filename, ' returns a status of ', status)","category":"page"},{"location":"interfaces/python/example-py/#Build-a-model","page":"Examples","title":"Build a model","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"Build the model","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"minimize    f  =  x0 +  x1\nsubject to              x1 <= 7\n            5 <=  x0 + 2x1 <= 15\n            6 <= 3x0 + 2x1\n            0 <= x0 <= 4; 1 <= x1","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"Firstly, one variable at a time, via a sequence of calls to addVar and addRow:s","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"inf = highspy.kHighsInf\n# Define two variables, first using identifiers for the bound values,\n# and then using constants\nlower = 0\nupper = 4\nh.addVar(lower, upper)\nh.addVar(1, inf)\n\n# Define the objective coefficients (costs) of the two variables,\n# identifying the variable by index, and changing its cost from the\n# default value of zero\ncost = 1\nh.changeColCost(0, cost)\nh.changeColCost(1, 1)\n\n# Define constraints for the model\n#\n# The first constraint (x1<=7) has only one nonzero coefficient,\n# identified by variable index 1 and value 1\nnum_nz = 1\nindex = 1\nvalue = 1\nh.addRow(-inf, 7, num_nz, index, value)\n\n# The second constraint (5 <= x0 + 2x1 <= 15) has two nonzero\n# coefficients, so arrays of indices and values are required\nnum_nz = 2\nindex = np.array([0, 1])\nvalue = np.array([1, 2])\nh.addRow(5, 15, num_nz, index, value)\n\n# The final constraint (6 <= 3x0 + 2x1) has the same indices but\n# different values\nnum_nz = 2\nvalue = np.array([3, 2])\nh.addRow(6, inf, num_nz, index, value)\n\n# Access LP\nlp = h.getLp()\nnum_nz = h.getNumNz()\nprint('LP has ', lp.num_col_, ' columns', lp.num_row_, ' rows and ', num_nz, ' nonzeros')","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"Alternatively, via calls to addCols and addRows.","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"inf = highspy.kHighsInf\n# The constraint matrix is defined with the rows below, but parameters\n# for an empty (column-wise) matrix must be passed\ncost = np.array([1, 1], dtype=np.double)\nlower = np.array([0, 1], dtype=np.double)\nupper = np.array([4, inf], dtype=np.double)\nnum_nz = 0\nstart = 0\nindex = 0\nvalue = 0\nh.addCols(2, cost, lower, upper, num_nz, start, index, value)\n# Add the rows, with the constraint matrix row-wise\nlower = np.array([-inf, 5, 6], dtype=np.double)\nupper = np.array([7, 15, inf], dtype=np.double)\nnum_nz = 5\nstart = np.array([0, 1, 3])\nindex = np.array([1, 0, 1, 0, 1])\nvalue = np.array([1, 1, 2, 3, 2], dtype=np.double)\nh.addRows(3, lower, upper, num_nz, start, index, value)","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"passColName\npassRowName","category":"page"},{"location":"interfaces/python/example-py/#Pass-a-model","page":"Examples","title":"Pass a model","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"Pass a model from a HighsLp instance","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"inf = highspy.kHighsInf\n# Define a HighsLp instance\nlp = highspy.HighsLp()\nlp.num_col_ = 2;\nlp.num_row_ = 3;\nlp.col_cost_ = np.array([1, 1], dtype=np.double)\nlp.col_lower_ = np.array([0, 1], dtype=np.double)\nlp.col_upper_ = np.array([4, inf], dtype=np.double)\nlp.row_lower_ = np.array([-inf, 5, 6], dtype=np.double)\nlp.row_upper_ = np.array([7, 15, inf], dtype=np.double)\n# In a HighsLp instsance, the number of nonzeros is given by a fictitious final start\nlp.a_matrix_.start_ = np.array([0, 2, 5])\nlp.a_matrix_.index_ = np.array([1, 2, 0, 1, 2])\nlp.a_matrix_.value_ = np.array([1, 3, 1, 2, 2], dtype=np.double)\nh.passModel(lp)","category":"page"},{"location":"interfaces/python/example-py/#Solve-the-model","page":"Examples","title":"Solve the model","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"The incumbent model in HiGHS is solved by calling","category":"page"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"h.run()","category":"page"},{"location":"interfaces/python/example-py/#Print-solution-information","page":"Examples","title":"Print solution information","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"solution = h.getSolution()\nbasis = h.getBasis()\ninfo = h.getInfo()\nmodel_status = h.getModelStatus()\nprint('Model status = ', h.modelStatusToString(model_status))\nprint()\nprint('Optimal objective = ', info.objective_function_value)\nprint('Iteration count = ', info.simplex_iteration_count)\nprint('Primal solution status = ', h.solutionStatusToString(info.primal_solution_status))\nprint('Dual solution status = ', h.solutionStatusToString(info.dual_solution_status))\nprint('Basis validity = ', h.basisValidityToString(info.basis_validity))","category":"page"},{"location":"interfaces/python/example-py/#Extract-results","page":"Examples","title":"Extract results","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"getModelStatus\ngetInfo\ngetSolution\ngetBasis","category":"page"},{"location":"interfaces/python/example-py/#Report-results","page":"Examples","title":"Report results","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"writeSolution","category":"page"},{"location":"interfaces/python/example-py/#example-py-option-values","page":"Examples","title":"Option values","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"setOptionValue\ngetOptionValue","category":"page"},{"location":"interfaces/python/example-py/#Get-model-data","page":"Examples","title":"Get model data","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"getNumCols\ngetNumRows\ngetNumEntries\ngetCol\ngetRow\ngetColEntries\ngetRowEntries\ngetCols\ngetRows\ngetColsEntries\ngetRowsEntries\ngetColName\ngetColByName\ngetRowName\ngetRowByName\ngetCoeff","category":"page"},{"location":"interfaces/python/example-py/#Modify-model-data","page":"Examples","title":"Modify model data","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"changeObjectiveSense\nchangeColCost\nchangeColBounds\nchangeRowBounds\nchangeColsCosts\nchangeColsBounds\nchangeRowsBounds\nchangeCoeff","category":"page"},{"location":"interfaces/python/example-py/#Set-solution","page":"Examples","title":"Set solution","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"setSolution","category":"page"},{"location":"interfaces/python/example-py/#Set-basis","page":"Examples","title":"Set basis","text":"","category":"section"},{"location":"interfaces/python/example-py/","page":"Examples","title":"Examples","text":"setBasis","category":"page"},{"location":"terminology/#Terminology","page":"Terminology","title":"Terminology","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"Any linear optimization model will have decision variables, a linear or quadratic objective function, and linear constraints and bounds on the values of the decision variables. A mixed-integer optimization model will require some or all of the decision variables to take integer values. The model may require the objective function to be maximized or minimized whilst satisfying the constraints and bounds. By default, HiGHS minimizes the objective function.","category":"page"},{"location":"terminology/#Bounds-and-the-objective-function","page":"Terminology","title":"Bounds and the objective function","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"The bounds on a decision variable are the least and greatest values that it may take, and infinite bounds can be specified. A linear objective function is given by a set of coefficients, one for each decision variable, and its value is the sum of products of coefficients and values of decision variables. The objective coefficients are often referred to as costs, and some may be zero. When a model has been solved, the optimal values of the decision variables are referred to as the (primal) solution.","category":"page"},{"location":"terminology/#Constraints-and-the-feasible-region","page":"Terminology","title":"Constraints and the feasible region","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"Linear constraints require linear functions of decision variables to lie between bounds, and infinite bounds can be specified. If the bounds are equal, then the constraint is an equation. If the bounds are both finite, then the constraint is said to be boxed or two-sided. The set of points satisfying linear constraints and bounds is known as the feasible region. Geometrically, this is a multi-dimensional convex polyhedron, whose extreme points are referred to as vertices.","category":"page"},{"location":"terminology/#The-constraint-matrix","page":"Terminology","title":"The constraint matrix","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"The coefficients of the linear constraints are naturally viewed as rows of a matrix. The constraint coefficients associated with a particular decision variable form a column of the constraint matrix. Hence constraints are sometimes referred to as rows, and decision variables as columns. Constraint matrix coefficients may be zero. Indeed, for large practical models it is typical for most of the coefficients to be zero. When this property can be exploited to computational advantage, the matrix is said to be sparse. When the constraint matrix is not sparse, the solution of large models is normally intractable computationally.","category":"page"},{"location":"terminology/#Optimization-outcomes","page":"Terminology","title":"Optimization outcomes","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"It is possible to define a set of constraints and bounds that cannot be satisfied, in which case the model is said to be infeasible. Conversely, it is possible that the value of the objective function can be improved without bound whilst satisfying the constraints and bounds, in which case the model is said to be unbounded. If a model is neither infeasible, nor unbounded, it has an optimal solution. The optimal objective function value for a linear optimization model may be achieved at more than point, in which case the optimal solution is said to be non-unique.","category":"page"},{"location":"terminology/#Primal-values","page":"Terminology","title":"Primal values","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"The values of the decision variables are referred to as primal values to distingush them from dual values.","category":"page"},{"location":"terminology/#Dual-values","page":"Terminology","title":"Dual values","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"When none of the decision variables is required to take integer values, the model is said to be continuous. For continuous models, each variable and constraint has an associated dual variable. The values of the dual variables constitute the dual solution, and it is for this reason that the term primal solution is used to distinguish the optimal values of the decision variables. At the optimal solution of a continuous model, some of the decision variables and values of constraint functions will be equal to their lower or upper bounds. Such a bound is said to be active. If a variable or constraint is at a bound, its corresponding dual solution value will generally be non-zero: when at a lower bound the dual value will be non-negative; when at an upper bound the dual value will be non-positive. When maximizing the objective the required signs of the dual values are reversed. Due to their economic interpretation, the dual values associated with constraints are often referred to as shadow prices or fair prices. Mathematically, the dual values associated with variables are often referred to as reduced costs, and the dual values associated with constraints are often referred to as Lagrange multipliers.","category":"page"},{"location":"terminology/#Basic-solution","page":"Terminology","title":"Basic solution","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"An LP model that is neither infeasible, nor unbounded, has an optimal solution at a vertex. At a vertex, the decision variables can be partitioned into as many basic variables as there are constraints, and nonbasic variables. Such a solution is known as a basic solution, and the partition referred to as a basis.","category":"page"},{"location":"terminology/#Sensitivity","page":"Terminology","title":"Sensitivity","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"Analysis of the change in optimal objective value of a continuous linear optimization model as the cost coefficients and bounds are changed is referred to in HiGHS as ranging. For an active bound, the corresponding dual value gives the change in the objective if that bound is increased or decreased. This level of analysis is often referred to as sensitivity. In general, the change in the objective is only known for a limited range of values for the active bound. HiGHS will return the limits of these bound ranges ranges, the objective value at both limits and the index of a variable or constraint that will acquire an active bound at both limits. For each variable with an active bound, the solution will remain optimal for a range of values of its cost coefficient. HiGHS will return the values of these cost ranges. For a variable or constraint whose value is not at a bound, HiGHS will return the range of values that the variable or constraint can take, the objective values at the limits of the range, and the index of a variable or constraint with a bound that will become in active at both limits.","category":"page"},{"location":"terminology/#terminology-mip","page":"Terminology","title":"MIP","text":"","category":"section"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"When solving a MIP, some or all the variables must take discrete values. In HiGHS there are three types of discrete variables.","category":"page"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"Integer: those that must take integer values between their bounds\nSemi-continuous: those that must be zero or take continuous values between their bounds\nSemi-integer: those that must be zero or take integer values between their bounds","category":"page"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"In the following discussion, for ease of reference to relative objective values, it is assumed that the objective is being minimized","category":"page"},{"location":"terminology/","page":"Terminology","title":"Terminology","text":"Any point for which the discrete variables satisfy their requirements, is said to be integer feasible. The objective value at such a point is an upper bound on the optimal objective value. The least such bound is known as the primal bound. The MIP solver generates a sequence of LPs, each of which has bounds on the variables that are tighter than those of the original model. When unsolved, there is a bound on the optimal objective value for each such LP and, the greatest such bound is known as the dual bound. The optimal objective value of the MIP cannot be less than the dual bound. Hence the gap between the primal and dual bounds is a measure of progress of the MIP solver. Although the absolute gap is of some interest, the gap relative to the primal bound is a better measure. When the gap reaches zero then the MIP is solved to optimality. However, it is often preferable to stop the MIP solver when the relative gap is below a specified tolerance.","category":"page"},{"location":"interfaces/cpp/link/#Using-HiGHS-from-another-CMake-Project","page":"Linking","title":"Using HiGHS from another CMake Project","text":"","category":"section"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"There are several ways the HiGHS library can be used within another C++ project. ","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"Firstly, make sure that HiGHS is installed locally with the correct CMake flags:","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"cd HiGHS\nmkdir build\ncd build\ncmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/path_to_highs_install/ ..   \ncmake --build . \ncmake --install .","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"This installs HiGHS in /path_to_highs_install/.","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"Suppose another C++ CMake project has executable code in some file main.cpp, which includes Highs.h. To use the HiGHS library, edit the CMakeLists.txt as follows:","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"project(LOAD_HIGHS LANGUAGES CXX)\n\nset(HIGHS_DIR path_to_highs_install/lib/cmake/highs)\n\nfind_package(HIGHS REQUIRED)\nfind_package(Threads REQUIRED)\n\nadd_executable(main main.cpp)\ntarget_link_libraries(main highs::highs)","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"The line ","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"set(HIGHS_DIR path_to_highs_install/lib/cmake/highs)","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"adds the HiGHS installation path to HIGHS_DIR. This is equivalent to building this project with","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"cmake -DHIGHS_DIR=path_to_highs_install/lib/cmake/highs ..","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"Alternatively, if you wish to include the code of HiGHS within your project, FetchContent is also available as follows: ","category":"page"},{"location":"interfaces/cpp/link/","page":"Linking","title":"Linking","text":"project(LOAD_HIGHS LANGUAGES CXX)\n\ninclude(FetchContent)\n\nFetchContent_Declare(\n    highs\n    GIT_REPOSITORY \"https://github.com/ERGO-Code/HiGHS.git\"\n    GIT_TAG        \"bazel\"\n)\nset(FAST_BUILD ON CACHE INTERNAL \"Fast Build\")\n\nFetchContent_MakeAvailable(highs)\n\nadd_executable(main call_from_cpp.cc)\ntarget_link_libraries(main highs::highs)","category":"page"},{"location":"executable/#Executable","page":"Executable","title":"Executable","text":"","category":"section"},{"location":"executable/","page":"Executable","title":"Executable","text":"For convenience, the executable is assumed to be bin/highs.","category":"page"},{"location":"executable/#Running-the-executable","page":"Executable","title":"Running the executable","text":"","category":"section"},{"location":"executable/","page":"Executable","title":"Executable","text":"The model given by the MPS file model.mps is solved by the command:","category":"page"},{"location":"executable/","page":"Executable","title":"Executable","text":"$ bin/highs model.mps","category":"page"},{"location":"executable/","page":"Executable","title":"Executable","text":"If the model file is not in the folder from which the command was issued, then a path name can be given.","category":"page"},{"location":"executable/#Command-line-options","page":"Executable","title":"Command line options","text":"","category":"section"},{"location":"executable/","page":"Executable","title":"Executable","text":"When HiGHS is run from the command line, some fundamental option values may be specified directly. Many more may be specified via a file. Formally, the usage is:","category":"page"},{"location":"executable/","page":"Executable","title":"Executable","text":"$ bin/highs --help\nHiGHS options\nUsage:\n  bin/highs [OPTION...] [file]\n\n      --model_file arg          File of model to solve.\n      --read_solution_file arg  File of solution to read.\n      --options_file arg        File containing HiGHS options.\n      --presolve arg            Presolve: \"choose\" by default - \"on\"/\"off\"\n                                are alternatives.\n      --solver arg              Solver: \"choose\" by default - \"simplex\"/\"ipm\"\n                                are alternatives.\n      --parallel arg            Parallel solve: \"choose\" by default -\n                                \"on\"/\"off\" are alternatives.\n      --run_crossover arg       Run crossover: \"on\" by default -\n                                \"choose\"/\"off\" are alternatives.\n      --time_limit arg          Run time limit (seconds - double).\n      --solution_file arg       File for writing out model solution.\n      --write_model_file arg    File for writing out model.\n      --random_seed arg         Seed to initialize random number generation.\n      --ranging arg             Compute cost, bound, RHS and basic solution\n                                ranging.\n      --version                 Print version.\n  -h, --help                    Print help.","category":"page"},{"location":"executable/","page":"Executable","title":"Executable","text":"The list of options section gives a full list of options, and the format in which they are specified.","category":"page"},{"location":"executable/#Return-code-values","page":"Executable","title":"Return code values","text":"","category":"section"},{"location":"executable/","page":"Executable","title":"Executable","text":"Consistent with the callable methods in HiGHS, there are three possible return codes","category":"page"},{"location":"executable/","page":"Executable","title":"Executable","text":"-1: An error has occurred in HiGHS\n0: HiGHS has run successfully\n1: HiGHS has recovered from an unusual event, or has terminated due to reaching a time or iteration limit","category":"page"},{"location":"parallel/#Parallelism","page":"Parallel","title":"Parallelism","text":"","category":"section"},{"location":"parallel/#Generally","page":"Parallel","title":"Generally","text":"","category":"section"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"HiGHS currently has limited opportunities for exploiting parallel computing. These are currently restricted to the dual simplex solver for LP, and the MIP solver. Details of these and future plans are set out below.","category":"page"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"By default, when running in parallel, HiGHS will use half the available threads on a machine. This number can be modified by setting the value of the threads option.","category":"page"},{"location":"parallel/#Dual-simplex","page":"Parallel","title":"Dual simplex","text":"","category":"section"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"By default, the HiGHS dual simplex solver runs in serial. However, it has a variant allowing concurrent processing. This variant is used when the parallel option is set \"on\", by specifying --parallel when running the executable via the command line, or by setting it via a library call in an application.","category":"page"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"The concurrency used will be the value of simplex_max_concurrency. If this is fewer than the number of threads available, parallel performance may be less than anticipated.","category":"page"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"The speed-up achieved using the dual simplex solver is normally bounded by the number of memory channels in the architecture, and typically less than the values achieved by Huangfu and Hall. This is because enhancements to the serial dual simplex solver in recent years have not been propagated to the parallel solver.","category":"page"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"Unless an LP has significantly more variables than constraints, the parallel dual simplex solver is unlikely to be worth using.","category":"page"},{"location":"parallel/#MIP","page":"Parallel","title":"MIP","text":"","category":"section"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"The only parallel computation currently implemented in the MIP solver occurs when performing symmetry detection on the model, and when querying clique tables. This parallelism is always advantageous, so is performed regardless of the value of the parallel option.","category":"page"},{"location":"parallel/#Future-plans","page":"Parallel","title":"Future plans","text":"","category":"section"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"A prototype parallel LP solver has been developed, in which the (serial) interior point solver and simplex variants are run concurrently. When one runs to completion, the others are stopped. However, to ensure that it runs deterministically requires considerable further work. The non-deterministic solver will be available by the end of 2023, but a deterministic solver is unlikely to be available before the end of 2024.","category":"page"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"The MIP solver has been written with parallel tree seach in mind, and it is hoped that this will be implemented before the end of 2024. The parallel LP solver will also enhance the MIP solver performance by spoeeding up the solution of the root node.","category":"page"},{"location":"parallel/","page":"Parallel","title":"Parallel","text":"Development of a parallel interior point solver will start in 2023, and is expected to be completed by the end of 2024.","category":"page"},{"location":"structures/classes/HighsLp/#HighsLp","page":"HighsLp","title":"HighsLp","text":"","category":"section"},{"location":"structures/classes/HighsLp/","page":"HighsLp","title":"HighsLp","text":"An LP model is communicated via an instance of the HighsLp class","category":"page"},{"location":"structures/classes/HighsLp/","page":"HighsLp","title":"HighsLp","text":"num_col_: Scalar of type integer - Number of columns in the model\nnum_row_: Scalar of type integer - Number of rows in the model\ncol_cost_: Vector of type double - Coefficients of the linear term in the objective function\ncol_lower_: Vector of type double - Lower bounds on the variables\ncol_upper_: Vector of type double - Upper bounds on the variables\nrow_lower_: Vector of type double - Lower bounds on the constraints\nrow_upper_: Vector of type double - Upper bounds on the constraints\na_matrix_: Instance of HighsSparseMatrix class - Constraint matrix\nsense_: Scalar of type ObjSense - Optimization sense of the model\noffset_: Scalar of type double - Constant term in the objective function\nmodel_name_: Scalar of type string - Name of the model\nobjective_name_: Scalar of type string - Name of the objective function\ncol_names_: Vector of type string - Names of the variables\nrow_names_: Vector of type string - Names of the constraints\nintegrality_: Vector of type HighsVarType - Type of each variable","category":"page"},{"location":"guide/basic/#guide-basic","page":"Basic features","title":"Basic features","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"The minimal use of HiGHS has the following three stages.","category":"page"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"Define a model\nSolve the model\nExtract results","category":"page"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"Although its default actions will be sufficient for most users, HiGHS can be controlled by setting Option values.","category":"page"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"Intro to other basic features","category":"page"},{"location":"guide/basic/#HiGHS-data-structures","page":"Basic features","title":"HiGHS data structures","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"There are several specialist data structures that can be used to interact with HiGHS when using C++ and highspy. These are defined in the sections on enums and classes, and are referred to below.","category":"page"},{"location":"guide/basic/#guide-basic-enums","page":"Basic features","title":"Enums","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"Enums are scalar identifier types that can take only a limited range of values.????","category":"page"},{"location":"guide/basic/#The","page":"Basic features","title":"The","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"advantage using these classes is that many fewer parameters are needed when passing data to and from HiGHS. However, the use of classes is not necessary for the basic use of highspy. As with the C and Fortran interfaces, there are equivalent methods that use simple scalars and vectors of data.","category":"page"},{"location":"guide/basic/#Defining-a-model","page":"Basic features","title":"Defining a model","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"HiGHS has comprehensive tools for defining models. This can be done by either reading a model using a data file created elsewhere, or by passing model data to HiGHS. Once a model has been defined in HiGHS, it is referred to as the incumbent model.","category":"page"},{"location":"guide/basic/#Reading-a-model-from-a-file","page":"Basic features","title":"Reading a model from a file","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"The simplest way to define a model in HiGHS is to read it from a file using the method readModel. HiGHS infers the file type by the extension. Supported extensions are:","category":"page"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":".mps: for an MPS file\n.lp: for a CPLEX LP file","category":"page"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"HiGHS can read compressed files that end in the .gz extension, but not (yet) files that end in the .zip extension.","category":"page"},{"location":"guide/basic/#Building-a-model","page":"Basic features","title":"Building a model","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"The model in HiGHS can be built using a sequence of calls to add variables and constraints. This is most easily done one-by-one using the methods addCol and addRow. Alternatively, calls to addVar can be used to add variables, with calls to changeColCost used to define each objective coefficient.","category":"page"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"Addition of multiple variables and constraints can be achieved using addCols and addRows. Alternatively, addVars can be used to add variables, with changeColsCost used to define objective coefficients. Note that defining multiple variables and constraints requires vectors of data and the specification of constraint coefficients as compressed row-wise or column-wise matrices.","category":"page"},{"location":"guide/basic/#Passing-a-model","page":"Basic features","title":"Passing a model","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"If the entire definition of a model is known, then it can be passed to HiGHS via individual data arrays using the method passModel. In languages where HiGHS data structures can be used, an instance of the HighsLp class can be populated with data and then passed.","category":"page"},{"location":"guide/basic/#Solving-the-model","page":"Basic features","title":"Solving the model","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"The incumbent model in HiGHS is solved by a call to the method run. By default, HiGHS minimizes the model's objective function, although this can be changed. Where possible, HiGHS will reduce the solution time by using data obtained on previous runs, or supplied by the user. More information on this process of hot starting solvers is available.","category":"page"},{"location":"guide/basic/#Extracting-results","page":"Basic features","title":"Extracting results","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"After solving a model, it is important to know whether it has been solved to optimality, shown to be infeasible or unbounded, or why the solver may have terminated early. This model status is given by the value returned by the method getModelStatus. This value is of type HighsModelStatus. Scalar information about a solved model is obtained using the method getInfo.  The solution and (any) basis are returned by the methods getSolution and getBasis respectively. HiGHS can also be used to write the solution to a file using the method writeSolution.","category":"page"},{"location":"guide/basic/#Option-values","page":"Basic features","title":"Option values","text":"","category":"section"},{"location":"guide/basic/","page":"Basic features","title":"Basic features","text":"The option values that control HiGHS are of type string, bool, int and double. Options are referred to by a string identical to the name of their identifier. A full specification of the options is given in the list of options. An option value is changed by passing its name and value to the method setOptionValue.  The current value of an option is obtained by passing its name to the method getOptionValue.","category":"page"},{"location":"structures/#structures-intro","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"structures/","page":"Introduction","title":"Introduction","text":"There are several specialist data structures that can be used to interact with HiGHS when using C++ and Python, and they are defined in the sections on enums and classes. The advantage using these classes is that many fewer parameters are needed when passing data to and from HiGHS. However, the use of classes is not necessary for the basic use of highspy. As with the C and Fortran interfaces, there are equivalent methods that use simple scalars and vectors of data.","category":"page"},{"location":"guide/#guide-introduction","page":"Introduction","title":"Introduction","text":"","category":"section"},{"location":"guide/","page":"Introduction","title":"Introduction","text":"This guide describes the features of HiGHS that are available when it is called from Python, C++, C and Fortran. It is written in three sections: basic, further and advanced. ","category":"page"},{"location":"guide/","page":"Introduction","title":"Introduction","text":"The basic section will be sufficient for most users. This and the further section cover the Python interface highspy.  Although references to methods link to Python examples, the method names and functionality for other interfaces are as close as possible.","category":"page"},{"location":"guide/","page":"Introduction","title":"Introduction","text":"The advanced section covers features in the C++, C and Fortran that are not in highspy.","category":"page"},{"location":"interfaces/c/#c-api","page":"C","title":"C","text":"","category":"section"},{"location":"interfaces/c/","page":"C","title":"C","text":"Modules = [Main]\nFilter = t -> startswith(\"$t\", \"Highs\")","category":"page"},{"location":"interfaces/c/#Highs_addCol-NTuple{7, Any}","page":"C","title":"Highs_addCol","text":"Highs_addCol(highs, cost, lower, upper, num_new_nz, index, value)\n\nAdd a new column (variable) to the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncost: The objective coefficient of the column. \nlower: The lower bound of the column. \nupper: The upper bound of the column. \nnum_new_nz: The number of non-zeros in the column. \nindex: An array of size [num_new_nz] with the row indices. \nvalue: An array of size [num_new_nz] with row values.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_addCols-NTuple{9, Any}","page":"C","title":"Highs_addCols","text":"Highs_addCols(highs, num_new_col, costs, lower, upper, num_new_nz, starts, index, value)\n\nAdd multiple columns (variables) to the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_new_col: The number of new columns to add. \ncosts: An array of size [num_new_col] with objective coefficients. \nlower: An array of size [num_new_col] with lower bounds. \nupper: An array of size [num_new_col] with upper bounds. \nnum_new_nz: The number of new nonzeros in the constraint matrix. \nstarts: The constraint coefficients are given as a matrix in compressed sparse column form by the arrays starts, index, and value. starts is an array of size [num_new_cols] with the start index of each row in indices and values. \nindex: An array of size [num_new_nz] with row indices. \nvalue: An array of size [num_new_nz] with row values.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_addRow-NTuple{6, Any}","page":"C","title":"Highs_addRow","text":"Highs_addRow(highs, lower, upper, num_new_nz, index, value)\n\nAdd a new row (a linear constraint) to the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nlower: The lower bound of the row. \nupper: The upper bound of the row. \nnum_new_nz: The number of non-zeros in the row \nindex: An array of size [num_new_nz] with column indices. \nvalue: An array of size [num_new_nz] with column values.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_addRows-NTuple{8, Any}","page":"C","title":"Highs_addRows","text":"Highs_addRows(highs, num_new_row, lower, upper, num_new_nz, starts, index, value)\n\nAdd multiple rows (linear constraints) to the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_new_row: The number of new rows to add \nlower: An array of size [num_new_row] with the lower bounds of the rows. \nupper: An array of size [num_new_row] with the upper bounds of the rows. \nnum_new_nz: The number of non-zeros in the rows. \nstarts: The constraint coefficients are given as a matrix in compressed sparse row form by the arrays starts, index, and value. starts is an array of size [num_new_rows] with the start index of each row in indices and values. \nindex: An array of size [num_new_nz] with column indices. \nvalue: An array of size [num_new_nz] with column values.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_addVar-Tuple{Any, Any, Any}","page":"C","title":"Highs_addVar","text":"Highs_addVar(highs, lower, upper)\n\nAdd a new variable to the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nlower: The lower bound of the column. \nupper: The upper bound of the column.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_addVars-NTuple{4, Any}","page":"C","title":"Highs_addVars","text":"Highs_addVars(highs, num_new_var, lower, upper)\n\nAdd multiple variables to the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_new_var: The number of new variables to add. \nlower: An array of size [num_new_var] with lower bounds. \nupper: An array of size [num_new_var] with upper bounds.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeCoeff-NTuple{4, Any}","page":"C","title":"Highs_changeCoeff","text":"Highs_changeCoeff(highs, row, col, value)\n\nChange a coefficient in the constraint matrix.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nrow: The index of the row to change. \ncol: The index of the column to change. \nvalue: The new constraint coefficient.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColBounds-NTuple{4, Any}","page":"C","title":"Highs_changeColBounds","text":"Highs_changeColBounds(highs, col, lower, upper)\n\nChange the variable bounds of a column.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol: The index of the column whose bounds are to change. \nlower: The new lower bound. \nupper: The new upper bound.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColCost-Tuple{Any, Any, Any}","page":"C","title":"Highs_changeColCost","text":"Highs_changeColCost(highs, col, cost)\n\nChange the objective coefficient of a column.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol: The index of the column fo change. \ncost: The new objective coefficient.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColIntegrality-Tuple{Any, Any, Any}","page":"C","title":"Highs_changeColIntegrality","text":"Highs_changeColIntegrality(highs, col, integrality)\n\nChange the integrality of a column.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol: The column index to change. \nintegrality: The new integrality of the column in the form of a kHighsVarType constant.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsBoundsByMask-NTuple{4, Any}","page":"C","title":"Highs_changeColsBoundsByMask","text":"Highs_changeColsBoundsByMask(highs, mask, lower, upper)\n\nChange the variable bounds of multiple columns given by a mask.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nmask: An array of length [num_col] with 1 if the column bounds should be changed and 0 otherwise. \nlower: An array of length [num_col] with the new lower bounds. \nupper: An array of length [num_col] with the new upper bounds.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsBoundsByRange-NTuple{5, Any}","page":"C","title":"Highs_changeColsBoundsByRange","text":"Highs_changeColsBoundsByRange(highs, from_col, to_col, lower, upper)\n\nChange the variable bounds of multiple adjacent columns.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfrom_col: The index of the first column whose bound changes. \nto_col: The index of the last column whose bound changes. \nlower: An array of length [to_col - from_col + 1] with the new lower bounds. \nupper: An array of length [to_col - from_col + 1] with the new upper bounds.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsBoundsBySet-NTuple{5, Any}","page":"C","title":"Highs_changeColsBoundsBySet","text":"Highs_changeColsBoundsBySet(highs, num_set_entries, set, lower, upper)\n\nChange the bounds of multiple columns given by an array of indices.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_set_entries: The number of columns to change. \nset: An array of size [num_set_entries] with the indices of the columns to change. \nlower: An array of length [num_set_entries] with the new lower bounds. \nupper: An array of length [num_set_entries] with the new upper bounds.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsCostByMask-Tuple{Any, Any, Any}","page":"C","title":"Highs_changeColsCostByMask","text":"Highs_changeColsCostByMask(highs, mask, cost)\n\nChange the cost of multiple columns given by a mask.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nmask: An array of length [num_col] with 1 if the column cost should be changed and 0 otherwise. \ncost: An array of length [num_col] with the new costs.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsCostByRange-NTuple{4, Any}","page":"C","title":"Highs_changeColsCostByRange","text":"Highs_changeColsCostByRange(highs, from_col, to_col, cost)\n\nChange the cost coefficients of multiple adjacent columns.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfrom_col: The index of the first column whose cost changes. \nto_col: The index of the last column whose cost changes. \ncost: An array of length [to_col - from_col + 1] with the new objective coefficients.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsCostBySet-NTuple{4, Any}","page":"C","title":"Highs_changeColsCostBySet","text":"Highs_changeColsCostBySet(highs, num_set_entries, set, cost)\n\nChange the cost of multiple columns given by an array of indices.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_set_entries: The number of columns to change. \nset: An array of size [num_set_entries] with the indices of the columns to change. \ncost: An array of length [num_set_entries] with the new costs of the columns.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsIntegralityByMask-Tuple{Any, Any, Any}","page":"C","title":"Highs_changeColsIntegralityByMask","text":"Highs_changeColsIntegralityByMask(highs, mask, integrality)\n\nChange the integrality of multiple columns given by a mask.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nmask: An array of length [num_col] with 1 if the column integrality should be changed and 0 otherwise. \nintegrality: An array of length [num_col] with the new integralities of the columns in the form of kHighsVarType constants.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsIntegralityByRange-NTuple{4, Any}","page":"C","title":"Highs_changeColsIntegralityByRange","text":"Highs_changeColsIntegralityByRange(highs, from_col, to_col, integrality)\n\nChange the integrality of multiple adjacent columns.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfrom_col: The index of the first column whose integrality changes. \nto_col: The index of the last column whose integrality changes. \nintegrality: An array of length [to_col - from_col + 1] with the new integralities of the columns in the form of kHighsVarType constants.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeColsIntegralityBySet-NTuple{4, Any}","page":"C","title":"Highs_changeColsIntegralityBySet","text":"Highs_changeColsIntegralityBySet(highs, num_set_entries, set, integrality)\n\nChange the integrality of multiple columns given by an array of indices.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_set_entries: The number of columns to change. \nset: An array of size [num_set_entries] with the indices of the columns to change. \nintegrality: An array of length [num_set_entries] with the new integralities of the columns in the form of kHighsVarType constants.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeObjectiveOffset-Tuple{Any, Any}","page":"C","title":"Highs_changeObjectiveOffset","text":"Highs_changeObjectiveOffset(highs, offset)\n\nChange the objective offset of the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noffset: The new objective offset.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeObjectiveSense-Tuple{Any, Any}","page":"C","title":"Highs_changeObjectiveSense","text":"Highs_changeObjectiveSense(highs, sense)\n\nChange the objective sense of the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nsense: The new optimization sense in the form of a kHighsObjSense constant.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeRowBounds-NTuple{4, Any}","page":"C","title":"Highs_changeRowBounds","text":"Highs_changeRowBounds(highs, row, lower, upper)\n\nChange the bounds of a row.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nrow: The index of the row whose bounds are to change. \nlower: The new lower bound. \nupper: The new upper bound.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeRowsBoundsByMask-NTuple{4, Any}","page":"C","title":"Highs_changeRowsBoundsByMask","text":"Highs_changeRowsBoundsByMask(highs, mask, lower, upper)\n\nChange the bounds of multiple rows given by a mask.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nmask: An array of length [num_row] with 1 if the row bounds should be changed and 0 otherwise. \nlower: An array of length [num_row] with the new lower bounds. \nupper: An array of length [num_row] with the new upper bounds.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_changeRowsBoundsBySet-NTuple{5, Any}","page":"C","title":"Highs_changeRowsBoundsBySet","text":"Highs_changeRowsBoundsBySet(highs, num_set_entries, set, lower, upper)\n\nChange the bounds of multiple rows given by an array of indices.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_set_entries: The number of rows to change. \nset: An array of size [num_set_entries] with the indices of the rows to change. \nlower: An array of length [num_set_entries] with the new lower bounds. \nupper: An array of length [num_set_entries] with the new upper bounds.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_clear-Tuple{Any}","page":"C","title":"Highs_clear","text":"Highs_clear(highs)\n\nReset the options and then call clearModel.\n\nSee Highs_destroy to free all associated memory.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_clearModel-Tuple{Any}","page":"C","title":"Highs_clearModel","text":"Highs_clearModel(highs)\n\nRemove all variables and constraints from the model highs, but do not invalidate the pointer highs. Future calls (for example, adding new variables and constraints) are allowed.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_clearSolver-Tuple{Any}","page":"C","title":"Highs_clearSolver","text":"Highs_clearSolver(highs)\n\nClear all solution data associated with the model.\n\nSee Highs_destroy to clear the model and free all associated memory.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_compilationDate-Tuple{}","page":"C","title":"Highs_compilationDate","text":"Highs_compilationDate()\n\nReturn the HiGHS compilation date.\n\nReturns\n\nThse HiGHS compilation date.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_create-Tuple{}","page":"C","title":"Highs_create","text":"Highs_create()\n\nCreate a Highs instance and return the reference.\n\nCall Highs_destroy on the returned reference to clean up allocated memory.\n\nReturns\n\nA pointer to the Highs instance.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_crossover-NTuple{6, Any}","page":"C","title":"Highs_crossover","text":"Highs_crossover(highs, num_col, num_row, col_value, col_dual, row_dual)\n\nSet a primal (and possibly dual) solution as a starting point, then run crossover to compute a basic feasible solution.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_col: The number of variables. \nnum_row: The number of rows. \ncol_value: An array of length [num_col] with optimal primal solution for each column. \ncol_dual: An array of length [num_col] with optimal dual solution for each column. May be NULL, in which case no dual solution is passed. \nrow_dual: An array of length [num_row] with optimal dual solution for each row. . May be NULL, in which case no dual solution is passed.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_deleteColsByMask-Tuple{Any, Any}","page":"C","title":"Highs_deleteColsByMask","text":"Highs_deleteColsByMask(highs, mask)\n\nDelete multiple columns given by a mask.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nmask: An array of length [num_col] with 1 if the column should be deleted and 0 otherwise.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_deleteColsByRange-Tuple{Any, Any, Any}","page":"C","title":"Highs_deleteColsByRange","text":"Highs_deleteColsByRange(highs, from_col, to_col)\n\nDelete multiple adjacent columns.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfrom_col: The index of the first column to delete. \nto_col: The index of the last column to delete.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_deleteColsBySet-Tuple{Any, Any, Any}","page":"C","title":"Highs_deleteColsBySet","text":"Highs_deleteColsBySet(highs, num_set_entries, set)\n\nDelete multiple columns given by an array of indices.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_set_entries: The number of columns to delete. \nset: An array of size [num_set_entries] with the indices of the columns to delete.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_deleteRowsByMask-Tuple{Any, Any}","page":"C","title":"Highs_deleteRowsByMask","text":"Highs_deleteRowsByMask(highs, mask)\n\nDelete multiple rows given by a mask.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nmask: An array of length [num_row] with 1 if the row should be deleted and 0 otherwise. The new index of any column not deleted is stored in place of the value 0.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_deleteRowsByRange-Tuple{Any, Any, Any}","page":"C","title":"Highs_deleteRowsByRange","text":"Highs_deleteRowsByRange(highs, from_row, to_row)\n\nDelete multiple adjacent rows.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfrom_row: The index of the first row to delete. \nto_row: The index of the last row to delete.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_deleteRowsBySet-Tuple{Any, Any, Any}","page":"C","title":"Highs_deleteRowsBySet","text":"Highs_deleteRowsBySet(highs, num_set_entries, set)\n\nDelete multiple rows given by an array of indices.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_set_entries: The number of rows to delete. \nset: An array of size [num_set_entries] with the indices of the rows to delete.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_destroy-Tuple{Any}","page":"C","title":"Highs_destroy","text":"Highs_destroy(highs)\n\nDestroy the model highs created by Highs_create and free all corresponding memory. Future calls using highs are not allowed.\n\nTo empty a model without invalidating highs, see Highs_clearModel.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getBasicVariables-Tuple{Any, Any}","page":"C","title":"Highs_getBasicVariables","text":"Highs_getBasicVariables(highs, basic_variables)\n\nGet the indices of the rows and columns that make up the basis matrix B of a basic feasible solution.\n\nNon-negative entries are indices of columns, and negative entries are -row\\_index - 1. For example, {1, -1} would be the second column and first row.\n\nThe order of these rows and columns is important for calls to the functions:\n\nHighs_getBasisInverseRow - Highs_getBasisInverseCol - Highs_getBasisSolve - Highs_getBasisTransposeSolve - Highs_getReducedRow - Highs_getReducedColumn\n\nParameters\n\nhighs: A pointer to the Highs instance. \nbasic_variables: An array of size [num_rows], filled with the indices of the basic variables.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getBasis-Tuple{Any, Any, Any}","page":"C","title":"Highs_getBasis","text":"Highs_getBasis(highs, col_status, row_status)\n\nGiven a linear program with a basic feasible solution, get the column and row basis statuses.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol_status: An array of length [num_col], to be filled with the column basis statuses in the form of a kHighsBasisStatus constant. \nrow_status: An array of length [num_row], to be filled with the row basis statuses in the form of a kHighsBasisStatus constant.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getBasisInverseCol-NTuple{5, Any}","page":"C","title":"Highs_getBasisInverseCol","text":"Highs_getBasisInverseCol(highs, col, col_vector, col_num_nz, col_index)\n\nGet a column of the inverse basis matrix B^-1.\n\nSee Highs_getBasicVariables for a description of the B matrix.\n\nThe arrays col_vector and col_index must have an allocated length of [num_row]. However, check col_num_nz to see how many non-zero elements are actually stored.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol: The index of the column to compute. \ncol_vector: An array of length [num_row] in which to store the values of the non-zero elements. \ncol_num_nz: The number of non-zeros in the column. \ncol_index: An array of length [num_row] in which to store the indices of the non-zero elements.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getBasisInverseRow-NTuple{5, Any}","page":"C","title":"Highs_getBasisInverseRow","text":"Highs_getBasisInverseRow(highs, row, row_vector, row_num_nz, row_index)\n\nGet a row of the inverse basis matrix B^-1.\n\nSee Highs_getBasicVariables for a description of the B matrix.\n\nThe arrays row_vector and row_index must have an allocated length of [num_row]. However, check row_num_nz to see how many non-zero elements are actually stored.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nrow: The index of the row to compute. \nrow_vector: An array of length [num_row] in which to store the values of the non-zero elements. \nrow_num_nz: The number of non-zeros in the row. \nrow_index: An array of length [num_row] in which to store the indices of the non-zero elements.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getBasisSolve-NTuple{5, Any}","page":"C","title":"Highs_getBasisSolve","text":"Highs_getBasisSolve(highs, rhs, solution_vector, solution_num_nz, solution_index)\n\nCompute x=B^-1b for a given vector b.\n\nSee Highs_getBasicVariables for a description of the B matrix.\n\nThe arrays solution_vector and solution_index must have an allocated length of [num_row]. However, check solution_num_nz to see how many non-zero elements are actually stored.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nrhs: The right-hand side vector b. \nsolution_vector: An array of length [num_row] in which to store the values of the non-zero elements. \nsolution_num_nz: The number of non-zeros in the solution. \nsolution_index: An array of length [num_row] in which to store the indices of the non-zero elements.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getBasisTransposeSolve-NTuple{5, Any}","page":"C","title":"Highs_getBasisTransposeSolve","text":"Highs_getBasisTransposeSolve(highs, rhs, solution_vector, solution_nz, solution_index)\n\nCompute x=B^-Tb for a given vector b.\n\nSee Highs_getBasicVariables for a description of the B matrix.\n\nThe arrays solution_vector and solution_index must have an allocated length of [num_row]. However, check solution_num_nz to see how many non-zero elements are actually stored.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nrhs: The right-hand side vector b \nsolution_vector: An array of length [num_row] in whcih to store the values of the non-zero elements. \nsolution_num_nz: The number of non-zeros in the solution. \nsolution_index: An array of length [num_row] in whcih to store the indices of the non-zero elements.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getBoolOptionValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_getBoolOptionValue","text":"Highs_getBoolOptionValue(highs, option, value)\n\nGet a boolean-valued option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \nvalue: The location in which the current value of the option should be placed.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getBoolOptionValues-NTuple{4, Any}","page":"C","title":"Highs_getBoolOptionValues","text":"Highs_getBoolOptionValues(highs, option, current_value, default_value)\n\nGet the current and default values of a bool option\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncurrent_value: A pointer to the current value of the option. \ndefault_value: A pointer to the default value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getColByName-Tuple{Any, Any, Any}","page":"C","title":"Highs_getColByName","text":"Highs_getColByName(highs, name, col)\n\nGet the index of a column from its name.\n\nIf multiple columns have the same name, or if no column exists with name, this function returns kHighsStatusError.\n\nParameters\n\nname: A pointer of the name of the column to query. \ncol: A pointer in which to store the index of the column\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getColIntegrality-Tuple{Any, Any, Any}","page":"C","title":"Highs_getColIntegrality","text":"Highs_getColIntegrality(highs, col, integrality)\n\nGet the integrality of a column.\n\nParameters\n\ncol: The index of the column to query. \nintegrality: An integer in which the integrality of the column should be placed. The integer is one of the kHighsVarTypeXXX constants.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getColName-Tuple{Any, Any, Any}","page":"C","title":"Highs_getColName","text":"Highs_getColName(highs, col, name)\n\nGet the name of a column.\n\nParameters\n\ncol: The index of the column to query. \nname: A pointer in which to store the name of the column. This must have length kHighsMaximumStringLength.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getColsByMask-NTuple{10, Any}","page":"C","title":"Highs_getColsByMask","text":"Highs_getColsByMask(highs, mask, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value)\n\nGet data associated with multiple columns given by a mask.\n\nThis function is identical to Highs_getColsByRange, except for how the columns are specified.\n\nParameters\n\nmask: An array of length [num_col] containing a 1 to get the column and 0 otherwise.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getColsByRange-NTuple{11, Any}","page":"C","title":"Highs_getColsByRange","text":"Highs_getColsByRange(highs, from_col, to_col, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value)\n\nGet data associated with multiple adjacent columns from the model.\n\nTo query the constraint coefficients, this function should be called twice.\n\nFirst, call this function with matrix_start, matrix_index, and matrix_value as NULL. This call will populate num_nz with the number of nonzero elements in the corresponding section of the constraint matrix.\n\nSecond, allocate new matrix_index and matrix_value arrays of length num_nz and call this function again to populate the new arrays with their contents.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfrom_col: The first column for which to query data for. \nto_col: The last column (inclusive) for which to query data for. \nnum_col: An integer populated with the number of columns got from the model (this should equal to\\_col - from\\_col + 1). \ncosts: An array of size [to_col - from_col + 1] for the column cost coefficients. \nlower: An array of size [to_col - from_col + 1] for the column lower bounds. \nupper: An array of size [to_col - from_col + 1] for the column upper bounds. \nnum_nz: An integer to be populated with the number of non-zero elements in the constraint matrix. \nmatrix_start: An array of size [to_col - from_col + 1] with the start indices of each column in matrix_index and matrix_value. \nmatrix_index: An array of size [num_nz] with the row indices of each element in the constraint matrix. \nmatrix_value: An array of size [num_nz] with the non-zero elements of the constraint matrix.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getColsBySet-NTuple{11, Any}","page":"C","title":"Highs_getColsBySet","text":"Highs_getColsBySet(highs, num_set_entries, set, num_col, costs, lower, upper, num_nz, matrix_start, matrix_index, matrix_value)\n\nGet data associated with multiple columns given by an array.\n\nThis function is identical to Highs_getColsByRange, except for how the columns are specified.\n\nParameters\n\nnum_set_indices: The number of indices in set. \nset: An array of size [num_set_entries] with the column indices to get.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getDoubleInfoValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_getDoubleInfoValue","text":"Highs_getDoubleInfoValue(highs, info, value)\n\nGet a double-valued info value.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ninfo: The name of the info item. \nvalue: A reference to a double that the result will be stored in.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getDoubleOptionValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_getDoubleOptionValue","text":"Highs_getDoubleOptionValue(highs, option, value)\n\nGet a double-valued option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \nvalue: The location in which the current value of the option should be placed.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getDoubleOptionValues-NTuple{6, Any}","page":"C","title":"Highs_getDoubleOptionValues","text":"Highs_getDoubleOptionValues(highs, option, current_value, min_value, max_value, default_value)\n\nGet the current and default values of a double option\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncurrent_value: A pointer to the current value of the option. \nmin_value: A pointer to the minimum value of the option. \nmax_value: A pointer to the maximum value of the option. \ndefault_value: A pointer to the default value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getDualRay-Tuple{Any, Any, Any}","page":"C","title":"Highs_getDualRay","text":"Highs_getDualRay(highs, has_dual_ray, dual_ray_value)\n\nGet an unbounded dual ray that is a certificate of primal infeasibility.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nhas_dual_ray: A pointer to an int to store 1 if the dual ray exists. \ndual_ray_value: An array of length [num_row] filled with the unbounded ray.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getHessianNumNz-Tuple{Any}","page":"C","title":"Highs_getHessianNumNz","text":"Highs_getHessianNumNz(highs)\n\nReturn the number of nonzeroes in the Hessian matrix of the model.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nThe number of nonzeroes in the Hessian matrix of the model.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getInfinity-Tuple{Any}","page":"C","title":"Highs_getInfinity","text":"Highs_getInfinity(highs)\n\nReturn the value of infinity used by HiGHS.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nThe value of infinity used by HiGHS.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getInfoType-Tuple{Any, Any, Any}","page":"C","title":"Highs_getInfoType","text":"Highs_getInfoType(highs, info, type)\n\nGet the type expected by an info item.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ninfo: The name of the info item. \ntype: An int in which the corresponding kHighsOptionType constant is stored.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getInt64InfoValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_getInt64InfoValue","text":"Highs_getInt64InfoValue(highs, info, value)\n\nGet an int64-valued info value.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ninfo: The name of the info item. \nvalue: A reference to an int64 that the result will be stored in.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getIntInfoValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_getIntInfoValue","text":"Highs_getIntInfoValue(highs, info, value)\n\nGet an int-valued info value.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ninfo: The name of the info item. \nvalue: A reference to an integer that the result will be stored in.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getIntOptionValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_getIntOptionValue","text":"Highs_getIntOptionValue(highs, option, value)\n\nGet an int-valued option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \nvalue: The location in which the current value of the option should be placed.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getIntOptionValues-NTuple{6, Any}","page":"C","title":"Highs_getIntOptionValues","text":"Highs_getIntOptionValues(highs, option, current_value, min_value, max_value, default_value)\n\nGet the current and default values of an int option\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncurrent_value: A pointer to the current value of the option. \nmin_value: A pointer to the minimum value of the option. \nmax_value: A pointer to the maximum value of the option. \ndefault_value: A pointer to the default value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getModel-NTuple{21, Any}","page":"C","title":"Highs_getModel","text":"Highs_getModel(highs, a_format, q_format, num_col, num_row, num_nz, hessian_num_nz, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, integrality)\n\nGet the data from a HiGHS model.\n\nThe input arguments have the same meaning (in a different order) to those used in Highs_passModel.\n\nNote that all arrays must be pre-allocated to the correct size before calling Highs_getModel. Use the following query methods to check the appropriate size: - Highs_getNumCol - Highs_getNumRow - Highs_getNumNz - Highs_getHessianNumNz\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getModelStatus-Tuple{Any}","page":"C","title":"Highs_getModelStatus","text":"Highs_getModelStatus(highs)\n\nReturn the optimization status of the model in the form of a kHighsModelStatus constant.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nAn integer corresponding to the kHighsModelStatus constant\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getNumCol-Tuple{Any}","page":"C","title":"Highs_getNumCol","text":"Highs_getNumCol(highs)\n\nReturn the number of columns in the model.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nThe number of columns in the model.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getNumNz-Tuple{Any}","page":"C","title":"Highs_getNumNz","text":"Highs_getNumNz(highs)\n\nReturn the number of nonzeros in the constraint matrix of the model.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nThe number of nonzeros in the constraint matrix of the model.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getNumOptions-Tuple{Any}","page":"C","title":"Highs_getNumOptions","text":"Highs_getNumOptions(highs)\n\nReturn the number of options\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getNumRow-Tuple{Any}","page":"C","title":"Highs_getNumRow","text":"Highs_getNumRow(highs)\n\nReturn the number of rows in the model.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nThe number of rows in the model.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getObjectiveOffset-Tuple{Any, Any}","page":"C","title":"Highs_getObjectiveOffset","text":"Highs_getObjectiveOffset(highs, offset)\n\nGet the objective offset.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noffset: The location in which the current objective offset should be placed.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getObjectiveSense-Tuple{Any, Any}","page":"C","title":"Highs_getObjectiveSense","text":"Highs_getObjectiveSense(highs, sense)\n\nGet the objective sense.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nsense: The location in which the current objective sense should be placed. The sense is a kHighsObjSense constant.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getObjectiveValue-Tuple{Any}","page":"C","title":"Highs_getObjectiveValue","text":"Highs_getObjectiveValue(highs)\n\nGet the primal objective function value.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nThe primal objective function value\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getOptionName-Tuple{Any, Any, Any}","page":"C","title":"Highs_getOptionName","text":"Highs_getOptionName(highs, index, name)\n\nGet the name of an option identified by index\n\nParameters\n\nhighs: A pointer to the Highs instance. \nindex: The index of the option. \nname: The name of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getOptionType-Tuple{Any, Any, Any}","page":"C","title":"Highs_getOptionType","text":"Highs_getOptionType(highs, option, type)\n\nGet the type expected by an option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \ntype: An int in which the corresponding kHighsOptionType constant should be placed.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getPrimalRay-Tuple{Any, Any, Any}","page":"C","title":"Highs_getPrimalRay","text":"Highs_getPrimalRay(highs, has_primal_ray, primal_ray_value)\n\nGet an unbounded primal ray that is a certificate of dual infeasibility.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nhas_primal_ray: A pointer to an int to store 1 if the primal ray exists. \nprimal_ray_value: An array of length [num_col] filled with the unbounded ray.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getRanging-NTuple{25, Any}","page":"C","title":"Highs_getRanging","text":"Highs_getRanging(highs, col_cost_up_value, col_cost_up_objective, col_cost_up_in_var, col_cost_up_ou_var, col_cost_dn_value, col_cost_dn_objective, col_cost_dn_in_var, col_cost_dn_ou_var, col_bound_up_value, col_bound_up_objective, col_bound_up_in_var, col_bound_up_ou_var, col_bound_dn_value, col_bound_dn_objective, col_bound_dn_in_var, col_bound_dn_ou_var, row_bound_up_value, row_bound_up_objective, row_bound_up_in_var, row_bound_up_ou_var, row_bound_dn_value, row_bound_dn_objective, row_bound_dn_in_var, row_bound_dn_ou_var)\n\nCompute the ranging information for all costs and bounds. For nonbasic variables the ranging informaiton is relative to the active bound. For basic variables the ranging information relates to...\n\nFor any values that are not required, pass NULL.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol_cost_up_value: The upper range of the cost value \ncol_cost_up_objective: The objective at the upper cost range \ncol_cost_up_in_var: The variable entering the basis at the upper cost range \ncol_cost_up_ou_var: The variable leaving the basis at the upper cost range \ncol_cost_dn_value: The lower range of the cost value \ncol_cost_dn_objective: The objective at the lower cost range \ncol_cost_dn_in_var: The variable entering the basis at the lower cost range \ncol_cost_dn_ou_var: The variable leaving the basis at the lower cost range \ncol_bound_up_value: The upper range of the column bound value \ncol_bound_up_objective: The objective at the upper column bound range \ncol_bound_up_in_var: The variable entering the basis at the upper column bound range \ncol_bound_up_ou_var: The variable leaving the basis at the upper column bound range \ncol_bound_dn_value: The lower range of the column bound value \ncol_bound_dn_objective: The objective at the lower column bound range \ncol_bound_dn_in_var: The variable entering the basis at the lower column bound range \ncol_bound_dn_ou_var: The variable leaving the basis at the lower column bound range \nrow_bound_up_value: The upper range of the row bound value \nrow_bound_up_objective: The objective at the upper row bound range \nrow_bound_up_in_var: The variable entering the basis at the upper row bound range \nrow_bound_up_ou_var: The variable leaving the basis at the upper row bound range \nrow_bound_dn_value: The lower range of the row bound value \nrow_bound_dn_objective: The objective at the lower row bound range \nrow_bound_dn_in_var: The variable entering the basis at the lower row bound range \nrow_bound_dn_ou_var: The variable leaving the basis at the lower row bound range\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getReducedColumn-NTuple{5, Any}","page":"C","title":"Highs_getReducedColumn","text":"Highs_getReducedColumn(highs, col, col_vector, col_num_nz, col_index)\n\nCompute a column of B^-1A.\n\nSee Highs_getBasicVariables for a description of the B matrix.\n\nThe arrays col_vector and col_index must have an allocated length of [num_row]. However, check col_num_nz to see how many non-zero elements are actually stored.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol: The index of the column to compute. \ncol_vector: An array of length [num_row] in which to store the values of the non-zero elements. \ncol_num_nz: The number of non-zeros in the column. \ncol_index: An array of length [num_row] in which to store the indices of the non-zero elements.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getReducedRow-NTuple{5, Any}","page":"C","title":"Highs_getReducedRow","text":"Highs_getReducedRow(highs, row, row_vector, row_num_nz, row_index)\n\nCompute a row of B^-1A.\n\nSee Highs_getBasicVariables for a description of the B matrix.\n\nThe arrays row_vector and row_index must have an allocated length of [num_row]. However, check row_num_nz to see how many non-zero elements are actually stored.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nrow: The index of the row to compute. \nrow_vector: An array of length [num_row] in which to store the values of the non-zero elements. \nrow_num_nz: The number of non-zeros in the row. \nrow_index: An array of length [num_row] in which to store the indices of the non-zero elements.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getRowByName-Tuple{Any, Any, Any}","page":"C","title":"Highs_getRowByName","text":"Highs_getRowByName(highs, name, row)\n\nGet the index of a row from its name.\n\nIf multiple rows have the same name, or if no row exists with name, this function returns kHighsStatusError.\n\nParameters\n\nname: A pointer of the name of the row to query. \nrow: A pointer in which to store the index of the row\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getRowName-Tuple{Any, Any, Any}","page":"C","title":"Highs_getRowName","text":"Highs_getRowName(highs, row, name)\n\nGet the name of a row.\n\nParameters\n\nrow: The index of the row to query. \nname: A pointer in which to store the name of the row. This must have length kHighsMaximumStringLength.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getRowsByMask-NTuple{9, Any}","page":"C","title":"Highs_getRowsByMask","text":"Highs_getRowsByMask(highs, mask, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value)\n\nGet data associated with multiple rows given by a mask.\n\nThis function is identical to Highs_getRowsByRange, except for how the rows are specified.\n\nParameters\n\nmask: An array of length [num_row] containing a 1 to get the row and 0 otherwise.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getRowsByRange-NTuple{10, Any}","page":"C","title":"Highs_getRowsByRange","text":"Highs_getRowsByRange(highs, from_row, to_row, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value)\n\nGet data associated with multiple adjacent rows from the model.\n\nTo query the constraint coefficients, this function should be called twice.\n\nFirst, call this function with matrix_start, matrix_index, and matrix_value as NULL. This call will populate num_nz with the number of nonzero elements in the corresponding section of the constraint matrix.\n\nSecond, allocate new matrix_index and matrix_value arrays of length num_nz and call this function again to populate the new arrays with their contents.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfrom_row: The first row for which to query data for. \nto_row: The last row (inclusive) for which to query data for. \nnum_row: An integer to be populated with the number of rows got from the smodel. \nlower: An array of size [to_row - from_row + 1] for the row lower bounds. \nupper: An array of size [to_row - from_row + 1] for the row upper bounds. \nnum_nz: An integer to be populated with the number of non-zero elements in the constraint matrix. \nmatrix_start: An array of size [to_row - from_row + 1] with the start indices of each row in matrix_index and matrix_value. \nmatrix_index: An array of size [num_nz] with the column indices of each element in the constraint matrix. \nmatrix_value: An array of size [num_nz] with the non-zero elements of the constraint matrix.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getRowsBySet-NTuple{10, Any}","page":"C","title":"Highs_getRowsBySet","text":"Highs_getRowsBySet(highs, num_set_entries, set, num_row, lower, upper, num_nz, matrix_start, matrix_index, matrix_value)\n\nGet data associated with multiple rows given by an array.\n\nThis function is identical to Highs_getRowsByRange, except for how the rows are specified.\n\nParameters\n\nnum_set_indices: The number of indices in set. \nset: An array of size [num_set_entries] containing the row indices to get.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getRunTime-Tuple{Any}","page":"C","title":"Highs_getRunTime","text":"Highs_getRunTime(highs)\n\nReturn the cumulative wall-clock time spent in Highs_run.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nThe cumulative wall-clock time spent in Highs_run\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getSolution-NTuple{5, Any}","page":"C","title":"Highs_getSolution","text":"Highs_getSolution(highs, col_value, col_dual, row_value, row_dual)\n\nGet the primal and dual solution from an optimized model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol_value: An array of length [num_col], to be filled with primal column values. \ncol_dual: An array of length [num_col], to be filled with dual column values. \nrow_value: An array of length [num_row], to be filled with primal row values. \nrow_dual: An array of length [num_row], to be filled with dual row values.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getStringOptionValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_getStringOptionValue","text":"Highs_getStringOptionValue(highs, option, value)\n\nGet a string-valued option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \nvalue: A pointer to allocated memory (of at least kMaximumStringLength) to store the current value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_getStringOptionValues-NTuple{4, Any}","page":"C","title":"Highs_getStringOptionValues","text":"Highs_getStringOptionValues(highs, option, current_value, default_value)\n\nGet the current and default values of a string option\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncurrent_value: A pointer to the current value of the option. \ndefault_value: A pointer to the default value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_githash-Tuple{}","page":"C","title":"Highs_githash","text":"Highs_githash()\n\nReturn the HiGHS githash.\n\nReturns\n\nThe HiGHS githash.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_lpCall-NTuple{21, Any}","page":"C","title":"Highs_lpCall","text":"Highs_lpCall(num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, col_value, col_dual, row_value, row_dual, col_basis_status, row_basis_status, model_status)\n\nFormulate and solve a linear program using HiGHS.\n\nParameters\n\nnum_col: The number of columns. \nnum_row: The number of rows. \nnum_nz: The number of nonzeros in the constraint matrix. \na_format: The format of the constraint matrix as a kHighsMatrixFormat constant. \nsense: The optimization sense as a kHighsObjSense constant. \noffset: The objective constant. \ncol_cost: An array of length [num_col] with the column costs. \ncol_lower: An array of length [num_col] with the column lower bounds. \ncol_upper: An array of length [num_col] with the column upper bounds. \nrow_lower: An array of length [num_row] with the row lower bounds. \nrow_upper: An array of length [num_row] with the row upper bounds. \na_start: The constraint matrix is provided to HiGHS in compressed sparse column form (if a_format is kHighsMatrixFormatColwise, otherwise compressed sparse row form). The sparse matrix consists of three arrays, a_start, a_index, and a_value. a_start is an array of length [num_col] containing the starting index of each column in a_index. If a_format is kHighsMatrixFormatRowwise the array is of length [num_row] corresponding to each row. \na_index: An array of length [num_nz] with indices of matrix entries. \na_value: An array of length [num_nz] with values of matrix entries.\ncol_value: An array of length [num_col], to be filled with the primal column solution. \ncol_dual: An array of length [num_col], to be filled with the dual column solution. \nrow_value: An array of length [num_row], to be filled with the primal row solution. \nrow_dual: An array of length [num_row], to be filled with the dual row solution. \ncol_basis_status: An array of length [num_col], to be filled with the basis status of the columns in the form of a kHighsBasisStatus constant. \nrow_basis_status: An array of length [num_row], to be filled with the basis status of the rows in the form of a kHighsBasisStatus constant. \nmodel_status: The location in which to place the termination status of the model after the solve in the form of a kHighsModelStatus constant.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_mipCall-NTuple{18, Any}","page":"C","title":"Highs_mipCall","text":"Highs_mipCall(num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality, col_value, row_value, model_status)\n\nFormulate and solve a mixed-integer linear program using HiGHS.\n\nThe signature of this method is identical to Highs_lpCall, except that it has an additional integrality argument, and that it is missing the col_dual, row_dual, col_basis_status and row_basis_status arguments.\n\nParameters\n\nintegrality: An array of length [num_col], containing a kHighsVarType constant for each column.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_passColName-Tuple{Any, Any, Any}","page":"C","title":"Highs_passColName","text":"Highs_passColName(highs, col, name)\n\nPass the name of a column.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol: The column for which the name is supplied. \nname: The name of the column.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_passHessian-NTuple{7, Any}","page":"C","title":"Highs_passHessian","text":"Highs_passHessian(highs, dim, num_nz, format, start, index, value)\n\nSet the Hessian matrix for a quadratic objective.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ndim: The dimension of the Hessian matrix. Should be [num_col]. \nnum_nz: The number of non-zero elements in the Hessian matrix. \nformat: The format of the Hessian matrix as a kHighsHessianFormat constant. This must be kHighsHessianFormatTriangular. \nstart: The Hessian matrix is provided to HiGHS as the upper triangular component in compressed sparse column form. The sparse matrix consists of three arrays, start, index, and value. start is an array of length [num_col] containing the starting index of each column in index. \nindex: An array of length [num_nz] with indices of matrix entries. \nvalue: An array of length [num_nz] with values of matrix entries.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_passLp-NTuple{15, Any}","page":"C","title":"Highs_passLp","text":"Highs_passLp(highs, num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value)\n\nPass a linear program (LP) to HiGHS in a single function call.\n\nThe signature of this function is identical to Highs_passModel, without the arguments for passing the Hessian matrix of a quadratic program and the integrality vector.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_passMip-NTuple{16, Any}","page":"C","title":"Highs_passMip","text":"Highs_passMip(highs, num_col, num_row, num_nz, a_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, integrality)\n\nPass a mixed-integer linear program (MILP) to HiGHS in a single function call.\n\nThe signature of function is identical to Highs_passModel, without the arguments for passing the Hessian matrix of a quadratic program.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_passModel-NTuple{21, Any}","page":"C","title":"Highs_passModel","text":"Highs_passModel(highs, num_col, num_row, num_nz, q_num_nz, a_format, q_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, integrality)\n\nPass a model to HiGHS in a single function call. This is faster than constructing the model using Highs_addRow and Highs_addCol.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nnum_col: The number of columns. \nnum_row: The number of rows. \nnum_nz: The number of elements in the constraint matrix. \nq_num_nz: The number of elements in the Hessian matrix. \na_format: The format of the constraint matrix to use in the form of a kHighsMatrixFormat constant. \nq_format: The format of the Hessian matrix to use in the form of a kHighsHessianFormat constant. \nsense: The optimization sense in the form of a kHighsObjSense constant. \noffset: The constant term in the objective function. \ncol_cost: An array of length [num_col] with the objective coefficients. \ncol_lower: An array of length [num_col] with the lower column bounds. \ncol_upper: An array of length [num_col] with the upper column bounds. \nrow_lower: An array of length [num_row] with the upper row bounds. \nrow_upper: An array of length [num_row] with the upper row bounds. \na_start: The constraint matrix is provided to HiGHS in compressed sparse column form (if a_format is kHighsMatrixFormatColwise, otherwise compressed sparse row form). The sparse matrix consists of three arrays, a_start, a_index, and a_value. a_start is an array of length [num_col] containing the starting index of each column in a_index. If a_format is kHighsMatrixFormatRowwise the array is of length [num_row] corresponding to each row. \na_index: An array of length [num_nz] with indices of matrix entries. \na_value: An array of length [num_nz] with values of matrix entries. \nq_start: The Hessian matrix is provided in the same format as the constraint matrix, using q_start, q_index, and q_value in the place of a_start, a_index, and a_value. If the model is linear, pass NULL. \nq_index: An array of length [q_num_nz] with indices of matrix entries. If the model is linear, pass NULL. \nq_value: An array of length [q_num_nz] with values of matrix entries. If the model is linear, pass NULL. \nintegrality: An array of length [num_col] containing a kHighsVarType consatnt for each column.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_passRowName-Tuple{Any, Any, Any}","page":"C","title":"Highs_passRowName","text":"Highs_passRowName(highs, row, name)\n\nPass the name of a row.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nrow: The row for which the name is supplied. \nname: The name of the row.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_qpCall-NTuple{26, Any}","page":"C","title":"Highs_qpCall","text":"Highs_qpCall(num_col, num_row, num_nz, q_num_nz, a_format, q_format, sense, offset, col_cost, col_lower, col_upper, row_lower, row_upper, a_start, a_index, a_value, q_start, q_index, q_value, col_value, col_dual, row_value, row_dual, col_basis_status, row_basis_status, model_status)\n\nFormulate and solve a quadratic program using HiGHS.\n\nThe signature of this method is identical to Highs_lpCall, except that it has additional arguments for specifying the Hessian matrix.\n\nParameters\n\nq_num_nz: The number of nonzeros in the Hessian matrix. \nq_format: The format of the Hessian matrix in the form of a kHighsHessianStatus constant. If q_num_nz > 0, this must be kHighsHessianFormatTriangular. \nq_start: The Hessian matrix is provided in the same format as the constraint matrix, using q_start, q_index, and q_value in the place of a_start, a_index, and a_value. \nq_index: An array of length [q_num_nz] with indices of matrix sentries. \nq_value: An array of length [q_num_nz] with values of matrix entries.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_readModel-Tuple{Any, Any}","page":"C","title":"Highs_readModel","text":"Highs_readModel(highs, filename)\n\nRead a model from filename into highs.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfilename: The filename to read.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_readOptions-Tuple{Any, Any}","page":"C","title":"Highs_readOptions","text":"Highs_readOptions(highs, filename)\n\nRead the option values from file.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfilename: The filename from which to read the option values.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_resetGlobalScheduler-Tuple{Any}","page":"C","title":"Highs_resetGlobalScheduler","text":"Highs_resetGlobalScheduler(blocking)\n\nReleases all resources held by the global scheduler instance.\n\nIt is not thread-safe to call this function while calling Highs_run or one of the Highs_XXXcall methods on any other Highs instance in any thread.\n\nAfter this function has terminated, it is guaranteed that eventually all previously created scheduler threads will terminate and allocated memory will be released.\n\nAfter this function has returned, the option value for the number of threads may be altered to a new value before the next call to Highs_run or one of the Highs_XXXcall methods.\n\nParameters\n\nblocking: If the blocking parameter has a nonzero value, then this function will not return until all memory is freed, which might be desirable when debugging heap memory, but it requires the calling thread to wait for all scheduler threads to wake-up which is usually not necessary.\n\nReturns\n\nNo status is returned since the function call cannot fail. Calling this function while any Highs instance is in use on any thread is undefined behavior and may cause crashes, but cannot be detected and hence is fully in the callers responsibility.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_resetOptions-Tuple{Any}","page":"C","title":"Highs_resetOptions","text":"Highs_resetOptions(highs)\n\nReset all options to their default value.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_run-Tuple{Any}","page":"C","title":"Highs_run","text":"Highs_run(highs)\n\nOptimize a model. The algorithm used by HiGHS depends on the options that have been set.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_scaleCol-Tuple{Any, Any, Any}","page":"C","title":"Highs_scaleCol","text":"Highs_scaleCol(highs, col, scaleval)\n\nScale a column by a constant.\n\nScaling a column modifies the elements in the constraint matrix, the variable bounds, and the objective coefficient.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol: The index of the column to scale. \nscaleval: The value by which to scale the column. If scaleval < 0, the variable bounds flipped.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_scaleRow-Tuple{Any, Any, Any}","page":"C","title":"Highs_scaleRow","text":"Highs_scaleRow(highs, row, scaleval)\n\nScale a row by a constant.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nrow: The index of the row to scale. \nscaleval: The value by which to scale the row. If scaleval < 0, the row bounds are flipped.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_setBasis-Tuple{Any, Any, Any}","page":"C","title":"Highs_setBasis","text":"Highs_setBasis(highs, col_status, row_status)\n\nSet a basic feasible solution by passing the column and row basis statuses to the model.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol_status: an array of length [num_col] with the column basis status in the form of kHighsBasisStatus constants \nrow_status: an array of length [num_row] with the row basis status in the form of kHighsBasisStatus constants\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_setBoolOptionValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_setBoolOptionValue","text":"Highs_setBoolOptionValue(highs, option, value)\n\nSet a boolean-valued option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \nvalue: The new value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_setDoubleOptionValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_setDoubleOptionValue","text":"Highs_setDoubleOptionValue(highs, option, value)\n\nSet a double-valued option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \nvalue: The new value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_setIntOptionValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_setIntOptionValue","text":"Highs_setIntOptionValue(highs, option, value)\n\nSet an int-valued option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \nvalue: The new value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_setLogicalBasis-Tuple{Any}","page":"C","title":"Highs_setLogicalBasis","text":"Highs_setLogicalBasis(highs)\n\nSet a logical basis in the model.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_setSolution-NTuple{5, Any}","page":"C","title":"Highs_setSolution","text":"Highs_setSolution(highs, col_value, row_value, col_dual, row_dual)\n\nSet a solution by passing the column and row primal and dual solution values.\n\nFor any values that are unavailable, pass NULL.\n\nParameters\n\nhighs: A pointer to the Highs instance. \ncol_value: An array of length [num_col] with the column solution values. \nrow_value: An array of length [num_row] with the row solution values. \ncol_dual: An array of length [num_col] with the column dual values. \nrow_dual: An array of length [num_row] with the row dual values.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_setStringOptionValue-Tuple{Any, Any, Any}","page":"C","title":"Highs_setStringOptionValue","text":"Highs_setStringOptionValue(highs, option, value)\n\nSet a string-valued option.\n\nParameters\n\nhighs: A pointer to the Highs instance. \noption: The name of the option. \nvalue: The new value of the option.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_version-Tuple{}","page":"C","title":"Highs_version","text":"Highs_version()\n\nReturn the HiGHS version number as a string of the form \"vX.Y.Z\".\n\nReturns\n\nThe HiGHS version as a char*.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_versionMajor-Tuple{}","page":"C","title":"Highs_versionMajor","text":"Highs_versionMajor()\n\nReturn the HiGHS major version number.\n\nReturns\n\nThe HiGHS major version number.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_versionMinor-Tuple{}","page":"C","title":"Highs_versionMinor","text":"Highs_versionMinor()\n\nReturn the HiGHS minor version number.\n\nReturns\n\nThe HiGHS minor version number.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_versionPatch-Tuple{}","page":"C","title":"Highs_versionPatch","text":"Highs_versionPatch()\n\nReturn the HiGHS patch version number.\n\nReturns\n\nThe HiGHS patch version number.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_writeModel-Tuple{Any, Any}","page":"C","title":"Highs_writeModel","text":"Highs_writeModel(highs, filename)\n\nWrite the model in highs to filename.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfilename: The filename to write.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_writeOptions-Tuple{Any, Any}","page":"C","title":"Highs_writeOptions","text":"Highs_writeOptions(highs, filename)\n\nWrite the current options to file.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfilename: The filename to write the options to.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_writeOptionsDeviations-Tuple{Any, Any}","page":"C","title":"Highs_writeOptionsDeviations","text":"Highs_writeOptionsDeviations(highs, filename)\n\nWrite the value of non-default options to file.\n\nThis is similar to Highs_writeOptions, except only options with non-default value are written to filename.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfilename: The filename to write the options to.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_writeSolution-Tuple{Any, Any}","page":"C","title":"Highs_writeSolution","text":"Highs_writeSolution(highs, filename)\n\nWrite the solution information (including dual and basis status, if available) to a file.\n\nSee also: Highs_writeSolutionPretty.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfilename: The name of the file to write the results to.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_writeSolutionPretty-Tuple{Any, Any}","page":"C","title":"Highs_writeSolutionPretty","text":"Highs_writeSolutionPretty(highs, filename)\n\nWrite the solution information (including dual and basis status, if available) to a file in a human-readable format.\n\nThe method identical to Highs_writeSolution, except that the printout is in a human-readiable format.\n\nParameters\n\nhighs: A pointer to the Highs instance. \nfilename: The name of the file to write the results to.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/c/#Highs_zeroAllClocks-Tuple{Any}","page":"C","title":"Highs_zeroAllClocks","text":"Highs_zeroAllClocks(highs)\n\nReset the clocks in a highs model.\n\nEach highs model contains a single instance of clock that records how much time is spent in various parts of the algorithm. This clock is not reset on entry to Highs_run, so repeated calls to Highs_run report the cumulative time spent in the algorithm. A side-effect is that this will trigger a time limit termination once the cumulative run time exceeds the time limit, rather than the run time of each individual call to Highs_run.\n\nAs a work-around, call Highs_zeroAllClocks before each call to Highs_run.\n\nParameters\n\nhighs: A pointer to the Highs instance.\n\nReturns\n\nA kHighsStatus constant indicating whether the call succeeded.\n\n\n\n\n\n","category":"method"},{"location":"interfaces/julia/#HiGHS.jl","page":"Julia","title":"HiGHS.jl","text":"","category":"section"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"HiGHS.jl is a Julia package that interfaces with HiGHS.","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"HiGHS.jl has two components:","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"a thin wrapper around the complete C API\nan interface to MathOptInterface","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"The C API can be accessed via HiGHS.Highs_xxx functions, where the names and arguments are identical to the C API.","category":"page"},{"location":"interfaces/julia/#Installation","page":"Julia","title":"Installation","text":"","category":"section"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"Install HiGHS as follows:","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"import Pkg\nPkg.add(\"HiGHS\")","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"In addition to installing the HiGHS.jl package, this command will also download and install the HiGHS binaries. (You do not need to install or compile HiGHS separately.)","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"To use a custom binary, read the Custom solver binaries section of the JuMP documentation.","category":"page"},{"location":"interfaces/julia/#Use-with-JuMP","page":"Julia","title":"Use with JuMP","text":"","category":"section"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"Pass HiGHS.Optimizer to JuMP.Model to create a JuMP model with HiGHS as the optimizer. Set options using set_optimizer_attribute.","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"using JuMP\nimport HiGHS\nmodel = Model(HiGHS.Optimizer)\nset_optimizer_attribute(model, \"presolve\", \"on\")\nset_optimizer_attribute(model, \"time_limit\", 60.0)","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"For more details, including a range of tutorials and examples using HiGHS, see the JuMP documentation.","category":"page"},{"location":"interfaces/julia/#Issues-and-feedback","page":"Julia","title":"Issues and feedback","text":"","category":"section"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"HiGHS.jl is maintained by the JuMP community and is not officially maintained or supported by the HiGHS developers.","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"To report a problem (e.g., incorrect results, or a crash of the solver), or make a suggestion for how to improve HiGHS.jl, please file a GitHub issue at HiGHS.jl.","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"If you use HiGHS from JuMP, use JuMP.write_to_file(model, \"filename.mps\") to write your model an MPS file, then upload the MPS file to https://gist.github.com and provide a link to the gist in the GitHub issue.","category":"page"},{"location":"interfaces/julia/#C-API","page":"Julia","title":"C API","text":"","category":"section"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"HiGHS.jl is a thin wrapper around the complete HiGHS C API.","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"As a basic example, we solve the model:","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"beginaligned\nmin                quad  x + y \ntextrmsubject to quad  5 le x + 2y le 15   \n                           6 le 3x + 2y         \n                           0 le x le 4         \n                           1 le y               \n                           y in mathbbZ\n\nendaligned","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"Here is the corresponding Julia code:","category":"page"},{"location":"interfaces/julia/","page":"Julia","title":"Julia","text":"julia> using HiGHS\n\njulia> highs = Highs_create()\nPtr{Nothing} @0x00007fc4557d3200\n\njulia> ret = Highs_setBoolOptionValue(highs, \"log_to_console\", false)\n0\n\njulia> @assert ret == 0  # If ret != 0, something went wrong\n\njulia> Highs_addCol(highs, 1.0, 0.0, 4.0, 0, C_NULL, C_NULL)   # x is column 0\n0\n\njulia> Highs_addCol(highs, 1.0, 1.0, Inf, 0, C_NULL, C_NULL)   # y is column 1\n0\n\njulia> Highs_changeColIntegrality(highs, 1, kHighsVarTypeInteger)\n0\n\njulia> Highs_changeObjectiveSense(highs, kHighsObjSenseMinimize)\n0\n\njulia> senseP = Ref{Cint}(0)  # Instead of passing `&sense`, pass a Julia `Ref`\nBase.RefValue{Int32}(0)\n\njulia> Highs_getObjectiveSense(model, senseP)\n0\n\njulia> senseP[] == kHighsObjSenseMinimize  # Dereference with senseP[]\ntrue\n\njulia> Highs_addRow(highs, 5.0, 15.0, 2, Cint[0, 1], [1.0, 2.0])\n0\n\njulia> Highs_addRow(highs, 6.0, Inf, 2, Cint[0, 1], [3.0, 2.0])\n0\n\njulia> Highs_run(highs)\n0\n\njulia> col_value = zeros(Cdouble, 2);\n\njulia> Highs_getSolution(highs, col_value, C_NULL, C_NULL, C_NULL)\n0\n\njulia> col_value\n2-element Vector{Float64}:\n 1.0\n 2.0\n\njulia> Highs_destroy(highs)","category":"page"},{"location":"guide/further/#guide-further","page":"Further features","title":"Further features","text":"","category":"section"},{"location":"guide/further/#Model-and-solution-management","page":"Further features","title":"Model and solution management","text":"","category":"section"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"HiGHS has comprehensive tools for defining and extracting models. This can be done either to/from MPS or (CPLEX) format LP files, or via method calls. HiGHS also has methods that permit the incumbent model to be modified. Solutions can be supplied and extracted using either files or method calls.","category":"page"},{"location":"guide/further/#Extracting-model-data","page":"Further features","title":"Extracting model data","text":"","category":"section"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"The numbers of column, rows and nonzeros in the model are returned by the methods getNumCols, getNumRows, and getNumEntries respectively.","category":"page"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"Model data can be extracted for a single column or row by specifying the index of the column or row and calling the methods getCol and getRow.","category":"page"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"As well as returning the value of the cost and bounds, these methods also return the number of nonzeros in the corresponding column or row of the constraint matrix. The indices and values of the nonzeros can be obtained using the methods getColEntries and getRowEntries.","category":"page"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"For multiple columns and rows defined by a set of indices, the corresponding data can be extracted using the methods getCols, getRows, getColsEntries and getRowsEntries.","category":"page"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"Specific matrix coefficients obtained using the method getCoeff.","category":"page"},{"location":"guide/further/#Modifying-model-data","page":"Further features","title":"Modifying model data","text":"","category":"section"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"The most immediate model modification is to change the sense of the objective. By default, HiGHS minimizes the model's objective function. The objective sense can be set to minimize (maximize) using changeObjectiveSense.","category":"page"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"Model data for can be changed for one column or row by specifying the index of the column or row, together with the new scalar value for the cost or bounds, the specific methods being changeColCost, changeColBounds. The corresponding method for a row is changeRowBounds. Changes for multiple columns or rows are defined by supplying a list of indices, together with arrays of new values, using the methods changeColsCost, changeColsBounds. The corresponding method for a row is changeRowsBounds. An individual matrix coefficient is changed by passing its row index, column index and new value to changeCoeff.","category":"page"},{"location":"guide/further/#hot-start","page":"Further features","title":"Hot start","text":"","category":"section"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"It may be possible for HiGHS to start solving a model using data obtained by solving a related model, or supplied by a user. Whether this is possible depends on the the class of model being solved, the solver to be used, and the modifications (if any) that have been to the incumbent model since it was last solved.","category":"page"},{"location":"guide/further/#LP","page":"Further features","title":"LP","text":"","category":"section"},{"location":"guide/further/","page":"Further features","title":"Further features","text":"To run HiGHS from a user-defined solution or basis, this is passed to HiGHS using the methods setSolution or setBasis.","category":"page"},{"location":"interfaces/python/#python-getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"interfaces/python/#Install","page":"Getting started","title":"Install","text":"","category":"section"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"HiGHS is available as highspy on PyPi.","category":"page"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"If highspy is not already installed, run:","category":"page"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"$ pip install highspy","category":"page"},{"location":"interfaces/python/#Import","page":"Getting started","title":"Import","text":"","category":"section"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"To use highspy within a Python program, it must be imported","category":"page"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"import highspy","category":"page"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"When using highspy, it is likely that numpy structures will be needed, so must also be imported","category":"page"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"import numpy as np","category":"page"},{"location":"interfaces/python/#Initialize","page":"Getting started","title":"Initialize","text":"","category":"section"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"HiGHS must be initialized before making calls to the HiGHS Python library:","category":"page"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"h = highspy.Highs()","category":"page"},{"location":"interfaces/python/#Methods","page":"Getting started","title":"Methods","text":"","category":"section"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"Detailed documentation of the methods and structures is given in the examples section.","category":"page"},{"location":"interfaces/python/#Return-status","page":"Getting started","title":"Return status","text":"","category":"section"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"Unless a method just returns data from HiGHS, so is guaranteed to run successfully, each method returns a status to indicate whether it has run successfully. This value is an instance of the enum HighsStatus, and in the examples section, it is referred to as status.","category":"page"},{"location":"interfaces/python/#First-example","page":"Getting started","title":"First example","text":"","category":"section"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"The following Python code reads a model from the file model.mps, and then solves it.","category":"page"},{"location":"interfaces/python/","page":"Getting started","title":"Getting started","text":"import highspy\n\nh = highspy.Highs()\nfilename = 'model.mps'\nh.readModel(filename)\nh.run()\nprint('Model ', filename, ' has status ', h.getModelStatus())","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"The HiGHS library is defined in the src/Highs.h header file. It contains the definition of the methods and members of the class. ","category":"page"},{"location":"interfaces/cpp/library/#Define-model","page":"The HiGHS library","title":"Define model","text":"","category":"section"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"Models in HiGHS are defined as an instance of the HighsModel class. This consists of one instance of the HighsLp class, and one instance of the HighsHessian class. Communication of models to and from HiGHS is possible via instances of the HighsLp or HighsModel class. In the C and other interfaces, communication of models is via scalar values and addresses of arrays.","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"In C++, the neatest way of passing a model to HiGHS is to create an instance of the HighsModel class, populate its data, and call","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"Highs::passModel(const HighsModel& model)","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"or create and populate an instance of the HighsLp class, and call","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"Highs::passModel(const HighsLp& lp)","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"For reading models from a file, use","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"Highs::readModel(const std::string& filename)","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"Below is an example of building a HighsModel","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"  // Create and populate a HighsModel instance for the LP\n  \n  // Min    f  =  x_0 +  x_1 + 3\n  // s.t.                x_1 <= 7\n  //        5 <=  x_0 + 2x_1 <= 15\n  //        6 <= 3x_0 + 2x_1\n  // 0 <= x_0 <= 4; 1 <= x_1\n  \n  // Although the first constraint could be expressed as an upper\n  // bound on x_1, it serves to illustrate a non-trivial packed\n  // column-wise matrix.\n  \n  HighsModel model;\n  model.lp_.num_col_ = 2;\n  model.lp_.num_row_ = 3;\n  model.lp_.sense_ = ObjSense::kMinimize;\n  model.lp_.offset_ = 3;\n  model.lp_.col_cost_ = {1.0, 1.0};\n  model.lp_.col_lower_ = {0.0, 1.0};\n  model.lp_.col_upper_ = {4.0, 1.0e30};\n  model.lp_.row_lower_ = {-1.0e30, 5.0, 6.0};\n  model.lp_.row_upper_ = {7.0, 15.0, 1.0e30};\n  \n  // Here the orientation of the matrix is column-wise\n  model.lp_.a_matrix_.format_ = MatrixFormat::kColwise;\n  // a_start_ has num_col_+1 entries, and the last entry is the number\n  // of nonzeros in A, allowing the number of nonzeros in the last\n  // column to be defined\n  model.lp_.a_matrix_.start_ = {0, 2, 5};\n  model.lp_.a_matrix_.index_ = {1, 2, 0, 1, 2};\n  model.lp_.a_matrix_.value_ = {1.0, 3.0, 1.0, 2.0, 2.0};","category":"page"},{"location":"interfaces/cpp/library/#Solve-model","page":"The HiGHS library","title":"Solve model","text":"","category":"section"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"  // Create a Highs instance\n  Highs highs;\n  HighsStatus return_status;\n  \n  // Pass the model to HiGHS\n  return_status = highs.passModel(model);\n  assert(return_status==HighsStatus::kOk);\n  \n  // Get a const reference to the LP data in HiGHS\n  const HighsLp& lp = highs.getLp();\n  \n  // Solve the model\n  return_status = highs.run();\n  assert(return_status==HighsStatus::kOk);\n  \n  // Get the model status\n  const HighsModelStatus& model_status = highs.getModelStatus();\n  assert(model_status==HighsModelStatus::kOptimal);","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"Solution information:","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"  const HighsInfo& info = highs.getInfo();\n  cout << \"Simplex iteration count: \" << info.simplex_iteration_count << endl;\n  cout << \"Objective function value: \" << info.objective_function_value << endl;\n  cout << \"Primal  solution status: \" << highs.solutionStatusToString(info.primal_solution_status) << endl;\n  cout << \"Dual    solution status: \" << highs.solutionStatusToString(info.dual_solution_status) << endl;\n  cout << \"Basis: \" << highs.basisValidityToString(info.basis_validity) << endl;","category":"page"},{"location":"interfaces/cpp/library/#Integrality-variables","page":"The HiGHS library","title":"Integrality variables","text":"","category":"section"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"To indicate that variables must take integer values use the HighsLp::integrality vector.","category":"page"},{"location":"interfaces/cpp/library/","page":"The HiGHS library","title":"The HiGHS library","text":"  model.lp_.integrality_.resize(lp.num_col_);\n  for (int col=0; col < lp.num_col_; col++)\n    model.lp_.integrality_[col] = HighsVarType::kInteger;\n\n  highs.passModel(model);","category":"page"},{"location":"options/definitions/#option-definitions","page":"List of options","title":"List of options","text":"","category":"section"},{"location":"options/definitions/#presolve","page":"List of options","title":"presolve","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Presolve option: \"off\", \"choose\" or \"on\"\nType: string\nDefault: \"choose\"","category":"page"},{"location":"options/definitions/#solver","page":"List of options","title":"solver","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Solver option: \"simplex\", \"choose\" or \"ipm\". If \"simplex\"/\"ipm\" is chosen then, for a MIP (QP) the integrality constraint (quadratic term) will be ignored\nType: string\nDefault: \"choose\"","category":"page"},{"location":"options/definitions/#parallel","page":"List of options","title":"parallel","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Parallel option: \"off\", \"choose\" or \"on\"\nType: string\nDefault: \"choose\"","category":"page"},{"location":"options/definitions/#run_crossover","page":"List of options","title":"run_crossover","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Run IPM crossover: \"off\", \"choose\" or \"on\"\nType: string\nDefault: \"on\"","category":"page"},{"location":"options/definitions/#time_limit","page":"List of options","title":"time_limit","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Time limit (seconds)\nType: double\nRange: [0, inf]\nDefault: inf","category":"page"},{"location":"options/definitions/#ranging","page":"List of options","title":"ranging","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Compute cost, bound, RHS and basic solution ranging: \"off\" or \"on\"\nType: string\nDefault: \"off\"","category":"page"},{"location":"options/definitions/#infinite_cost","page":"List of options","title":"infinite_cost","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Limit on cost coefficient: values larger than this will be treated as infinite\nType: double\nRange: [1e+15, inf]\nDefault: 1e+20","category":"page"},{"location":"options/definitions/#infinite_bound","page":"List of options","title":"infinite_bound","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Limit on |constraint bound|: values larger than this will be treated as infinite\nType: double\nRange: [1e+15, inf]\nDefault: 1e+20","category":"page"},{"location":"options/definitions/#small_matrix_value","page":"List of options","title":"small_matrix_value","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Lower limit on |matrix entries|: values smaller than this will be treated as zero\nType: double\nRange: [1e-12, inf]\nDefault: 1e-09","category":"page"},{"location":"options/definitions/#large_matrix_value","page":"List of options","title":"large_matrix_value","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Upper limit on |matrix entries|: values larger than this will be treated as infinite\nType: double\nRange: [1, inf]\nDefault: 1e+15","category":"page"},{"location":"options/definitions/#primal_feasibility_tolerance","page":"List of options","title":"primal_feasibility_tolerance","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Primal feasibility tolerance\nType: double\nRange: [1e-10, inf]\nDefault: 1e-07","category":"page"},{"location":"options/definitions/#dual_feasibility_tolerance","page":"List of options","title":"dual_feasibility_tolerance","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Dual feasibility tolerance\nType: double\nRange: [1e-10, inf]\nDefault: 1e-07","category":"page"},{"location":"options/definitions/#ipm_optimality_tolerance","page":"List of options","title":"ipm_optimality_tolerance","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"IPM optimality tolerance\nType: double\nRange: [1e-12, inf]\nDefault: 1e-08","category":"page"},{"location":"options/definitions/#objective_bound","page":"List of options","title":"objective_bound","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Objective bound for termination\nType: double\nRange: [-inf, inf]\nDefault: inf","category":"page"},{"location":"options/definitions/#random_seed","page":"List of options","title":"random_seed","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Random seed used in HiGHS\nType: integer\nRange: {0, 2147483647}\nDefault: 0","category":"page"},{"location":"options/definitions/#threads","page":"List of options","title":"threads","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Number of threads used by HiGHS (0: automatic)\nType: integer\nRange: {0, 2147483647}\nDefault: 0","category":"page"},{"location":"options/definitions/#simplex_strategy","page":"List of options","title":"simplex_strategy","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Strategy for simplex solver 0 => Choose; 1 => Dual (serial); 2 => Dual (PAMI); 3 => Dual (SIP); 4 => Primal\nType: integer\nRange: {0, 4}\nDefault: 1","category":"page"},{"location":"options/definitions/#simplex_scale_strategy","page":"List of options","title":"simplex_scale_strategy","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Simplex scaling strategy: off / choose / equilibration / forced equilibration / max value 0 / max value 1 (0/1/2/3/4/5)\nType: integer\nRange: {0, 5}\nDefault: 1","category":"page"},{"location":"options/definitions/#simplex_dual_edge_weight_strategy","page":"List of options","title":"simplex_dual_edge_weight_strategy","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Strategy for simplex dual edge weights: Choose / Dantzig / Devex / Steepest Edge (-1/0/1/2)\nType: integer\nRange: {-1, 2}\nDefault: -1","category":"page"},{"location":"options/definitions/#simplex_primal_edge_weight_strategy","page":"List of options","title":"simplex_primal_edge_weight_strategy","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Strategy for simplex primal edge weights: Choose / Dantzig / Devex / Steepest Edge (-1/0/1/2)\nType: integer\nRange: {-1, 2}\nDefault: -1","category":"page"},{"location":"options/definitions/#simplex_iteration_limit","page":"List of options","title":"simplex_iteration_limit","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Iteration limit for simplex solver when solving LPs, but not subproblems in the MIP solver\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions/#simplex_update_limit","page":"List of options","title":"simplex_update_limit","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Limit on the number of simplex UPDATE operations\nType: integer\nRange: {0, 2147483647}\nDefault: 5000","category":"page"},{"location":"options/definitions/#simplex_max_concurrency","page":"List of options","title":"simplex_max_concurrency","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Maximum level of concurrency in parallel simplex\nType: integer\nRange: {1, 8}\nDefault: 8","category":"page"},{"location":"options/definitions/#output_flag","page":"List of options","title":"output_flag","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Enables or disables solver output\nType: boolean\nDefault: \"true\"","category":"page"},{"location":"options/definitions/#log_to_console","page":"List of options","title":"log_to_console","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Enables or disables console logging\nType: boolean\nDefault: \"true\"","category":"page"},{"location":"options/definitions/#solution_file","page":"List of options","title":"solution_file","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Solution file\nType: string\nDefault: \"\"","category":"page"},{"location":"options/definitions/#log_file","page":"List of options","title":"log_file","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Log file\nType: string\nDefault: \"\"","category":"page"},{"location":"options/definitions/#write_solution_to_file","page":"List of options","title":"write_solution_to_file","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Write the primal and dual solution to a file\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions/#write_solution_style","page":"List of options","title":"write_solution_style","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Style of solution file (raw = computer-readable, pretty = human-readable): -1 => HiGHS old raw (deprecated); 0 => HiGHS raw; 1 => HiGHS pretty; 2 => Glpsol raw; 3 => Glpsol pretty; 4 => HiGHS sparse raw\nType: integer\nRange: {-1, 4}\nDefault: 0","category":"page"},{"location":"options/definitions/#glpsol_cost_row_location","page":"List of options","title":"glpsol_cost_row_location","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Location of cost row for Glpsol file: -2 => Last; -1 => None; 0 => None if empty, otherwise data file location; 1 <= n <= num_row => Location n; n > num_row => Last\nType: integer\nRange: {-2, 2147483647}\nDefault: 0","category":"page"},{"location":"options/definitions/#write_model_file","page":"List of options","title":"write_model_file","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Write model file\nType: string\nDefault: \"\"","category":"page"},{"location":"options/definitions/#write_model_to_file","page":"List of options","title":"write_model_to_file","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Write the model to a file\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions/#mip_detect_symmetry","page":"List of options","title":"mip_detect_symmetry","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Whether MIP symmetry should be detected\nType: boolean\nDefault: \"true\"","category":"page"},{"location":"options/definitions/#mip_max_nodes","page":"List of options","title":"mip_max_nodes","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"MIP solver max number of nodes\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions/#mip_max_stall_nodes","page":"List of options","title":"mip_max_stall_nodes","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"MIP solver max number of nodes where estimate is above cutoff bound\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions/#mip_improving_solution_save","page":"List of options","title":"mip_improving_solution_save","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Whether improving MIP solutions should be saved\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions/#mip_improving_solution_report_sparse","page":"List of options","title":"mip_improving_solution_report_sparse","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Whether improving MIP solutions should be reported in sparse format\nType: boolean\nDefault: \"false\"","category":"page"},{"location":"options/definitions/#mip_improving_solution_file","page":"List of options","title":"mip_improving_solution_file","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"File for reporting improving MIP solutions: not reported if \"\"\nType: string\nDefault: \"\"","category":"page"},{"location":"options/definitions/#mip_max_leaves","page":"List of options","title":"mip_max_leaves","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"MIP solver max number of leave nodes\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions/#mip_max_improving_sols","page":"List of options","title":"mip_max_improving_sols","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Limit on the number of improving solutions found to stop the MIP solver prematurely\nType: integer\nRange: {1, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"options/definitions/#mip_lp_age_limit","page":"List of options","title":"mip_lp_age_limit","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Maximal age of dynamic LP rows before they are removed from the LP relaxation in the MIP solver\nType: integer\nRange: {0, 32767}\nDefault: 10","category":"page"},{"location":"options/definitions/#mip_pool_age_limit","page":"List of options","title":"mip_pool_age_limit","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Maximal age of rows in the MIP solver cutpool before they are deleted\nType: integer\nRange: {0, 1000}\nDefault: 30","category":"page"},{"location":"options/definitions/#mip_pool_soft_limit","page":"List of options","title":"mip_pool_soft_limit","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Soft limit on the number of rows in the MIP solver cutpool for dynamic age adjustment\nType: integer\nRange: {1, 2147483647}\nDefault: 10000","category":"page"},{"location":"options/definitions/#mip_pscost_minreliable","page":"List of options","title":"mip_pscost_minreliable","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Minimal number of observations before MIP solver pseudo costs are considered reliable\nType: integer\nRange: {0, 2147483647}\nDefault: 8","category":"page"},{"location":"options/definitions/#mip_min_cliquetable_entries_for_parallelism","page":"List of options","title":"mip_min_cliquetable_entries_for_parallelism","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Minimal number of entries in the MIP solver cliquetable before neighbourhood queries of the conflict graph use parallel processing\nType: integer\nRange: {0, 2147483647}\nDefault: 100000","category":"page"},{"location":"options/definitions/#mip_feasibility_tolerance","page":"List of options","title":"mip_feasibility_tolerance","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"MIP feasibility tolerance\nType: double\nRange: [1e-10, inf]\nDefault: 1e-06","category":"page"},{"location":"options/definitions/#mip_heuristic_effort","page":"List of options","title":"mip_heuristic_effort","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Effort spent for MIP heuristics\nType: double\nRange: [0, 1]\nDefault: 0.05","category":"page"},{"location":"options/definitions/#mip_rel_gap","page":"List of options","title":"mip_rel_gap","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Tolerance on relative gap, |ub-lb|/|ub|, to determine whether optimality has been reached for a MIP instance\nType: double\nRange: [0, inf]\nDefault: 0.0001","category":"page"},{"location":"options/definitions/#mip_abs_gap","page":"List of options","title":"mip_abs_gap","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Tolerance on absolute gap of MIP, |ub-lb|, to determine whether optimality has been reached for a MIP instance\nType: double\nRange: [0, inf]\nDefault: 1e-06","category":"page"},{"location":"options/definitions/#ipm_iteration_limit","page":"List of options","title":"ipm_iteration_limit","text":"","category":"section"},{"location":"options/definitions/","page":"List of options","title":"List of options","text":"Iteration limit for IPM solver\nType: integer\nRange: {0, 2147483647}\nDefault: 2147483647","category":"page"},{"location":"interfaces/cpp/examples/","page":"Examples","title":"Examples","text":"Example programs calling HiGHS from C, C++, C#, Fortran and Python are in HiGHS/examples.","category":"page"},{"location":"structures/classes/HighsSolution/#HighsSolution","page":"HighsSolution","title":"HighsSolution","text":"","category":"section"},{"location":"structures/classes/HighsSolution/","page":"HighsSolution","title":"HighsSolution","text":"The solution of a model is communicated via an instance of the HighsSolution class","category":"page"},{"location":"structures/classes/HighsSolution/","page":"HighsSolution","title":"HighsSolution","text":"value_valid: Scalar of type bool - Indicates whether the column and row values are valid\ndual_valid: Scalar of type bool - Indicates whether the column and row duals are valid\ncol_value: Vector of type double - Values of the columns (variables)\ncol_dual: Vector of type double - Duals of the columns (variables)\nrow_value: Vector of type double - Values of the rows (constraints)\nrow_dual: Vector of type double - Duals of the rows (constraints)","category":"page"},{"location":"structures/classes/HighsSparseMatrix/#HighsSparseMatrix","page":"HighsSparseMatrix","title":"HighsSparseMatrix","text":"","category":"section"},{"location":"structures/classes/HighsSparseMatrix/","page":"HighsSparseMatrix","title":"HighsSparseMatrix","text":"The constraint matrix of an LP model is communicated via an instance of the HighsSparseMatrix class","category":"page"},{"location":"structures/classes/HighsSparseMatrix/","page":"HighsSparseMatrix","title":"HighsSparseMatrix","text":"format_: Scalar of MatrixFormat type - Format of the matrix\nnum_col_ : Scalar of integer type - Number of columns in the matrix\nnum_row_: Scalar of integer type - Number of rows in the matrix\nstart_: Vector of integer type - Start of each compressed vector in the matrixs\nindex_: Vector of integer type - Indices of the nonzeros in the matrix\nvalue_: Vector of double type - Values of the nonzeros in the matrix","category":"page"},{"location":"interfaces/cpp/#cpp-getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"HiGHS can be cloned from GitHub with the command","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"git clone https://github.com/ERGO-Code/HiGHS.git","category":"page"},{"location":"interfaces/cpp/#Building-HiGHS-from-source-code","page":"Getting started","title":"Building HiGHS from source code","text":"","category":"section"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"HiGHS uses CMake (minimum version 3.15) as a build system, and can use the following compilers","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"Clang clang\nGNU g++\nIntel icc","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"The simplest setup is to create a build folder (within the folder into which HiGHS has been downloaded) and then build HiGHS within it. The name of the build folder is arbitrary but, assuming it is HiGHS/build, the full sequence of commands required is as follows","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"cd HiGHS\nmkdir build\ncd build\ncmake -DFAST_BUILD=ON ..\ncmake --build .","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"This creates the executable build/bin/highs.","category":"page"},{"location":"interfaces/cpp/#Test-build","page":"Getting started","title":"Test build","text":"","category":"section"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"To perform a quick test to see whether the compilation was successful, run ctest from within the build folder.","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"ctest","category":"page"},{"location":"interfaces/cpp/#Install","page":"Getting started","title":"Install","text":"","category":"section"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"The default installation location may need administrative permissions. To install, after building and testing, run","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"cmake --install .","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"To install in a specified installation directory run CMake with the CMAKE_INSTALL_PREFIX flag set:","category":"page"},{"location":"interfaces/cpp/","page":"Getting started","title":"Getting started","text":"cmake -DFAST_BUILD=ON -DCMAKE_INSTALL_PREFIX=/path/to/highs_install ..\ncmake --build .\ncmake --install .","category":"page"},{"location":"structures/classes/#classes-overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"structures/classes/","page":"Overview","title":"Overview","text":"The data members of fundamental classes in HiGHS are defined in this section.","category":"page"},{"location":"structures/classes/","page":"Overview","title":"Overview","text":"HighsSparseMatrix\nHighsLp\nHighsSolution\nHighsBasis\nHighsInfo","category":"page"},{"location":"structures/classes/","page":"Overview","title":"Overview","text":"Class data members for internal use only are not documented.","category":"page"},{"location":"#HiGHS-High-Performance-Optimization-Software","page":"About","title":"HiGHS - High Performance Optimization Software","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"(Image: Build Status)","category":"page"},{"location":"","page":"About","title":"About","text":"warning: Warning\nThis HiGHS documentation is a work in progress.","category":"page"},{"location":"","page":"About","title":"About","text":"HiGHS is software for the definition, modification and solution of large scale sparse linear optimization models.","category":"page"},{"location":"","page":"About","title":"About","text":"HiGHS is freely available from GitHub under the MIT licence and has no third-party dependencies.","category":"page"},{"location":"#Specification","page":"About","title":"Specification","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"HiGHS can solve linear programming (LP) models of the form:","category":"page"},{"location":"","page":"About","title":"About","text":"beginaligned\nmin                quad  c^T x        \ntextrmsubject to quad  L le Ax le U  \n                           l le x le u\nendaligned","category":"page"},{"location":"","page":"About","title":"About","text":"as well as mixed integer linear programming (MILP) models of the same form, for which some of the variables must take integer values.","category":"page"},{"location":"","page":"About","title":"About","text":"HiGHS also solves quadratic programming (QP) models, which contain an additional objective term frac12x^T Q x, where the Hessian matrix Q is positive semi-definite. HiGHS cannot solve QP models where some of the variables must take integer values.","category":"page"},{"location":"","page":"About","title":"About","text":"Read the Terminology section for more details.","category":"page"},{"location":"#Using-HiGHS","page":"About","title":"Using HiGHS","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"HiGHS can be used as a standalone executable on Windows, Linux and MacOS. There is also a C++11 library that can be used within a C++ project or, via its C, C#, FORTRAN, Julia, and Python interfaces.","category":"page"},{"location":"","page":"About","title":"About","text":"Get started by following Install HiGHS.","category":"page"},{"location":"#Overview","page":"About","title":"Overview","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"The standalone Executable allows models to be solved from MPS or (CPLEX) LP files, with full control of the HiGHS run-time options, and the solution can be written to files in human and computer-readable formats.","category":"page"},{"location":"","page":"About","title":"About","text":"The HiGHS shared library allows models to be loaded, built and modified. It can also be used to extract solution data and perform other operations relating to the incumbent model. The basic functionality is introduced via a Guide, with links to examples of its use in the Python interface highspy. This makes use of the C++ structures and enums, and is as close as possible to the native C++ library calls. These can be studied via the C++ header file.","category":"page"},{"location":"","page":"About","title":"About","text":"The C interface cannot make use of the C++ structures and enums, and its methods are documented explicitly.","category":"page"},{"location":"#Solution-algorithms","page":"About","title":"Solution algorithms","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"For LPs, HiGHS has implementations of both the revised simplex and interior point methods. MIPs are solved by branch-and-price, and QPs by active set.","category":"page"},{"location":"#Citing-HiGHS","page":"About","title":"Citing HiGHS","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"If you use HiGHS in an academic context, please cite the following article:","category":"page"},{"location":"","page":"About","title":"About","text":"Parallelizing the dual revised simplex method, Q. Huangfu and J. A. J. Hall, Mathematical Programming Computation, 10 (1), 119-142, 2018. DOI: 10.1007/s12532-017-0130-5","category":"page"},{"location":"#Performance-benchmarks","page":"About","title":"Performance benchmarks","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"The performance of HiGHS relative to some commercial and open-source simplex solvers may be assessed via the Mittlemann benchmarks:","category":"page"},{"location":"","page":"About","title":"About","text":"LP (find primal-dual feasible point)\nLP (find optimal basic solution)\nMILP benchmarks.","category":"page"},{"location":"#Feedback","page":"About","title":"Feedback","text":"","category":"section"},{"location":"","page":"About","title":"About","text":"Your comments or specific questions on HiGHS would be greatly appreciated, so please send an email to highsopt@gmail.com to get in touch with the development team.","category":"page"},{"location":"structures/classes/HighsBasis/#HighsBasis","page":"HighsBasis","title":"HighsBasis","text":"","category":"section"},{"location":"structures/classes/HighsBasis/","page":"HighsBasis","title":"HighsBasis","text":"The basis of a model is communicated via an instance of the HighsBasis class","category":"page"},{"location":"structures/classes/HighsBasis/","page":"HighsBasis","title":"HighsBasis","text":"valid: Scalar of type bool - Indicates whether the basis is valid\ncol_status: Vector of type HighsBasisStatus - Comparison with HighsBasisStatus gives the basis status of a column\nrow_status: Vector of type HighsBasisStatus - Comparison with HighsBasisStatus gives the basis status of a row","category":"page"}]
}
