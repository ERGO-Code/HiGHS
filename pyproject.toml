[project.urls]
"Source Code" = "https://github.com/ERGO-Code/HiGHS"
"Bug Tracker" = "https://github.com/ERGO-Code/HiGHS/issues"

[build-system]
requires = ["meson-python<0.14.0", "meson>=1.2.0", "pybind11", "ninja"]
build-backend = "mesonpy"

[project]
name = "highspy"
version = "1.7.2"
description = "A thin set of pybind11 wrappers to HiGHS"
authors = [{ name = "HiGHS developers", email = "highsopt@gmail.com" }]
readme = "README.md"

requires-python = ">=3.8"
dependencies = ["numpy"]

classifiers = [
  # "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

[project.optional-dependencies]
test = ["pytest", "numpy"]

[tool.meson-python.args]
setup = ['-Dwith_pybind11=True',
        '-Dhighsint64=False',
        '-Dwrap_mode=forcefallback',
         # ^-- collects pybind11, see https://github.com/ERGO-Code/HiGHS/pull/1343#discussion_r1252446966
        ]
dist = ['--include-subprojects']
install = ['--skip-subprojects']

[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli_level = "INFO"
filterwarnings = ["error"]
testpaths = ["tests"]


[tool.cibuildwheel]
build = "*"
skip = "cp3{6,7}-*"

test-command = "pytest {project}/tests"
test-extras = ["test", "numpy"]
test-skip = ["*universal2:arm64"]
build-verbosity = 1

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "manylinux2014"
manylinux-i686-image = "manylinux2014"
repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
archs = ["x86_64 arm64"]
environment = { RUNNER_OS="macOS" }
repair-wheel-command = [
  "delocate-listdeps {wheel}",
  "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}",
]

[tool.cibuildwheel.windows]
# Use delvewheel on windows, and install the project so delvewheel can find it
before-build = "pip install delvewheel meson ninja && meson setup bbdir && meson install -C bbdir"
repair-wheel-command = "delvewheel repair --add-path c:/bin;c:/lib;c:/bin/src;c:/lib/src;D:/a/HiGHS/HiGHS/bbdir/src/ -w {dest_dir} {wheel}"
